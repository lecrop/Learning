[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Como descargar datos de repositorios on-line",
    "section": "",
    "text": "Para buscar RNAseq disponibles on-line es aquí me han recomendado acceder a NCBI, a la sección SRA.\nAquí realizamos la búsqueda que queramos. Veremos que muchos títulos, esto se debe a que lo que nos aparece son muestras de experimetos, no experimentos completos (como sucede en GEO). Es por ello por lo que en todo momento estamos viendo dónde se ha secuenciado la muestra, el número de reads (spots), el número de bases y lo que pesa cada archivo.\nCuando tengamos un candidato de muestra de interés clickamos y acedemos a la siguiente pantalla:\nDónde 1) es el nombre que recibe el proyecto y donde tendremos toda la información asociada al mismo, tanto publicación (si está publicado), como accesos a GEO (si la tiene, que normalmente si) y accesos a la misma información que 2). Esta información se trata de un listado de los SRA de las muestras secuenciadas en este experimento. Tenemos que clickar en 2 para ver este listado, que es lo que nos interesa.\nUna vez aquí nos saldrá el Run Selector (hay veces que no aparecer pero no pasa nada, no es imprescindible hacer este paso), donde podremos ver las propiedades del experimento:\nAquí tenemos toda la información del experimento (en common Fields) al que pertenecen las muestras. Esta información es muy útil para generar un documento excel para recopilar información de posibles RNAseq a analizar (dejo el ejemplo del que he creado yo):\nEs recomendable dejar los hipervínculos para luego facilitar el trabajo a la hora de buscar los datos. Continuaremos trabajando como ejemplo con el experimento que he ido mostrado en las ilustraciones. El siguiente paso es descargar un .csv con los accession de los SRA que vamos a analizar en la primera columna. Para ello tenemos que tener buscado en el NIH/SRA el código SRA del estudio al que están asociadas las muestras (tal y como se ve en la ilustración 1). Una vez aquí, clickamos en “Send to”, seleccionamos “File” y en formato seleccionamos “Accession List”, tal y como se observa en la Ilustración 1, y le damos a Create File:\nNos quedaría el siguiente (1), del cual tendríamos que eliminar la primera fila para que quede como (2) de forma definitiva.\n!!Comienzsa la programación!! O no.. depende de ti jeje"
  },
  {
    "objectID": "index.html#comando-perl-de-descarga-de-datos-para-linux-y-mac",
    "href": "index.html#comando-perl-de-descarga-de-datos-para-linux-y-mac",
    "title": "Como descargar datos de repositorios on-line",
    "section": "1.1 Comando Perl de descarga de datos para Linux y Mac",
    "text": "1.1 Comando Perl de descarga de datos para Linux y Mac\nPara trabajar con este script y tener la información ordenada es recomendable crear una carpeta en el escritorio con un nombre sin espacios. En esta carpeta tenemos que introducir un .csv con los accession que hemos preparado previamente. Para ejecutarlo, el comando es el siguiente:\n\nperl Irimia_Script_SRA_File_maker.pl SraAccList.csv\n\nDonde, - Perl Abre las funciones del lenguaje perl. - Irimia_Script_SRA_File_maker.pl es el script que se va ejecutar. - SraAccList.csv es el documento csv que nos bajamos con los accesion de las muestras de un experimento."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#comando-perl-de-descarga-de-datos-para-windows",
    "href": "index.html#comando-perl-de-descarga-de-datos-para-windows",
    "title": "Como descargar datos de repositorios on-line",
    "section": "1.2 Comando Perl de descarga de datos para Windows",
    "text": "1.2 Comando Perl de descarga de datos para Windows\nPara utilizar Perl en Windows hay que descargar “Strawberry” e instalarlo en C\\: (siguiendo las recomendaciones de instalación en todo momento).\nUna vez lo hemos instalado podremos utilizar el lenguaje Perl en nuestro ordenador Windows. Para poder utilizarlo tenemos leer el script de descarga automática (Irirmia_Script_SRA_File_maker.pl).\n\n\n\n\n\n\nWarning\n\n\n\nPara visualizar el script (no es necesario modificar nada del script) es recomendable descargarse un visualizador de documentos. En Windows hay un visualizador bastante cómodo de utilizar que es el “Visual Studio Code”.\n\n\nPara trabajar con este script y tener la información ordenada es recomendable crear una carpeta en el escritorio con un nombre sin espacios (por ejemplo, yo puse “Visual_Studio_Folders”. En esta carpeta tenemos que introducir un .csv con los accession.\n\n\n\n\n\n\nTip\n\n\n\nEste archivo lo tenemos que colocar en la misma carpeta que el script (la que hemos creado para utilizar Perl)\n\n\nUna vez tenemos esta carpeta con los documentos adecuados abrimos el terminal de Windows (buscamos cmd) y nos vamos a la carpeta que hemos creado con estos archivos y lo ejecutamos con la misma sintaxis que para Linux.\n\n1.2.1 Problemas de windows\nEs posible que si estamos utilizando el cmd de windows nos de el siguiente error:\n\n\"wget\" no se reconoce como un comando interno o externo, programa o archivo por lotes ejecutable.\n\nEn este caso necesitamos instalar esta función como función ejecutable. Para ello debemos seguir las instrucciones de la siguiente página web\nEn esta página nos tenemos que ir al apartado siguiente (y ver el video):\n\n\n\nImagen 11\n\n\nPor si acaso, dejo también el enlace tanto del video en youtube como de la página de descarga (hay que descargar el de x64 bits, https://eternallybored.org/misc/wget/)\nPor algún motivo no se me ha descargado (por error 404 al intentar acceder a la pag web) pero no pasa nada porque voy a empezar a trabajar en el superordenador que va con Linux y así se me acaban los problemas."
  },
  {
    "objectID": "index.html#contenido-script-irirmia_script_sra_file_maker.pl",
    "href": "index.html#contenido-script-irirmia_script_sra_file_maker.pl",
    "title": "Como descargar datos de repositorios on-line",
    "section": "1.3 Contenido Script Irirmia_Script_SRA_File_maker.pl",
    "text": "1.3 Contenido Script Irirmia_Script_SRA_File_maker.pl\n\n1.3.1 Código\n\nopen (I, $ARGV[0]);\n\nopen (O, \"&gt;$ARGV[0].out\");\n\nsystem \"mkdir SRA\" unless (-e \"SRA\");\n\nwhile (&lt;I&gt;){\n\n    s/\\r//g;\n\n    s/\\\"//g;\n\n    ($sra)=/(.+)/;\n    \n    sleep 2 unless (-e \"$sra\" || -e \"SRA/$sra\");\n\n    system \"wget https://www.ncbi.nlm.nih.gov/sra/$sra -O SRA/$sra\" unless (-e \"$sra\" || -e \"SRA/$sra\");\n\n    open (F, \"SRA/$sra\");\n\n    $/=\"\";\n\n    $PE=$n_reads=$all_info=\"\";\n\n    while (&lt;F&gt;){\n\n    if (/$sra\\&lt;\\/a\\&gt;\\&lt;\\/td\\&gt;\\&lt;td align\\=\\\"right\\\"\\&gt;(.+?)\\&lt;\\/td\\&gt;\\&lt;td align\\=\\\"right\\\"\\&gt;(.+?)\\&lt;\\/td\\&gt;\\&lt;td align/){$n_reads=$1;$bases=$2;}\n\n    if (/(\\&gt;Sample\\: .+?)\\&gt;Library\\:/){$all_info1=$1;}\n\n    if (/(\\&gt;Library\\: .+?)\\&gt;Runs\\:/){$all_info2=$1;}\n\n    if (/Layout\\: \\&lt;span\\&gt;PAIRED\\&lt;\\/span\\&gt;/){$PE=\"PE\";}\n\n    elsif (/Layout\\: \\&lt;span\\&gt;SINGLE\\&lt;\\/span\\&gt;/){$PE=\"SE\";}\n\n    }\n\n    close F;\n\n    $/=\"\\n\";\n\n    ($bp,$mult)=$bases=~/(.+)(\\w)$/;\n\n    $bases=$bp*1000 if $mult eq \"K\";\n\n    $bases=$bp*1000000 if $mult eq \"M\";\n\n    $bases=$bp*1000000000 if $mult eq \"G\";\n\n    \n\n    $n_readsT=$n_reads;\n\n    $n_readsT=~s/\\,//g;\n\n    $le=sprintf(\"%.0f\",$bases/$n_readsT) if $n_readsT&gt;0;\n\n    $le=\"NA\" if $n_readsT==0;\n\n    ($info1)=$all_info1=~/\\&gt;Sample\\:.+?\\&gt;(.+?)\\&lt;/;\n\n    ($info2)=$all_info2=~/\\&gt;Name\\:.+?\\&gt;(.+?)\\&lt;/;\n \n    print O \"$sra\\t$info1\\t$info2\\t$n_reads\\t$le\\t$PE\\n\";\n}\nexit;\n\n\n\n1.3.2 Explicación del Script\n\nopen (I, $ARGV[0]);\n\n\nopen: open es una función incorporada en Perl que se utiliza para abrir archivos o comandos externos. Permite interactuar con archivos para lectura, escritura o ambas.\n(I, $ARGV[0]): Esta parte de la función open toma dos argumentos encerrados entre paréntesis.\n\n\nI: El primer argumento, I, es un identificador de archivo o “filehandle”. En Perl, los filehandles son como variables que representan archivos abiertos. En este caso, I se utiliza como el filehandle para referirse al archivo abierto.\n\\$ARGV[0]: El segundo argumento, \\$ARGV[0], es una variable de tipo array. \\$ARGV es un array especial en Perl que contiene los argumentos de línea de comandos proporcionados a tu script de Perl. \\$ARGV[0] se refiere específicamente al primer argumento de la línea de comandos, que generalmente es el nombre del archivo que deseas abrir. Por lo tanto, \\$ARGV[0] es el nombre del archivo que deseas abrir.\n\nLa línea que proporcionaste, open (I, $ARGV[0]), abre el archivo cuyo nombre se proporciona como el primer argumento de línea de comandos cuando ejecutas el script de Perl y lo asocia con el filehandle I. Después de esta línea, puedes leer o escribir en el archivo utilizando el filehandle I.\nPor ejemplo, puedes leer líneas del archivo de la siguiente manera:\n\nwhile (&lt;I&gt;) {\n    # Procesar cada línea del archivo abierto\n    print $_;  # Imprimir la línea\n}\n\nLuego habría que cerrar el archivo con: close(I)\n\nopen (O, \"&gt;$ARGV[0].out\");\n\nAquí está la explicación: 1. open: Al igual que en la línea anterior, open es una función incorporada en Perl que se utiliza para abrir archivos o realizar operaciones de archivo. 2. (O, \"&gt;$ARGV[0].out\"): Esta parte de la función open toma dos argumentos encerrados entre paréntesis. - O: El primer argumento, O, es un identificador de archivo o “filehandle”. Al igual que en el ejemplo anterior, se utiliza como un filehandle que representará al archivo que estamos a punto de abrir. - &gt;\\$ARGV[0].out: El segundo argumento es una cadena de texto que define cómo se abrirá el archivo. En este caso, la cadena contiene “&gt;”, que indica que el archivo se abrirá en modo escritura (output), y \\$ARGV[0].out, que es el nombre del archivo de salida. $ARGV[0] se refiere al primer argumento de la línea de comandos que generalmente es el nombre del archivo de entrada, y .out es una extensión que se agrega para el archivo de salida.\nEntonces, la línea open (O, \"&gt;\\$ARGV[0].out\"); está abriendo un archivo para escritura. Si \\$ARGV[0] fuera, por ejemplo, “entrada.txt”, esta línea crearía un nuevo archivo llamado “entrada.txt.out” (o con la extensión que hayas especificado) y asociaría el filehandle O con este archivo.\n\nsystem \"mkdir SRA\" unless (-e \"SRA\");\n\nExplicación: 1. system: es una función en Perl que te permite ejecutar comandos del sistema operativo desde tu script de Perl. Puedes proporcionarle un comando entre comillas, y Perl lo ejecutará en el sistema operativo. 2. mkdir SRA: Este es el comando que se ejecutará en el sistema operativo. En este caso, se trata del comando mkdir, que se utiliza para crear directorios (carpetas) en el sistema de archivos. mkdir SRA significa que se intentará crear un directorio llamado “SRA” en el directorio actual. 3. unless (-e \"SRA\"): Esta parte de la línea es una condición que se evalúa antes de ejecutar el comando mkdir. La condición verifica si el directorio “SRA” no existe en el sistema de archivos. Para hacerlo, utiliza -e, que es un operador de archivo en Perl que verifica si un archivo o directorio existe. Si el directorio “SRA” no existe (unless significa “a menos que” o “si no”), entonces se ejecuta el comando mkdir SRA para crear el directorio. En resumen, la línea system \"mkdir SRA\" unless (-e \"SRA\"); comprueba si el directorio “SRA” ya existe en el sistema de archivos. Si no existe, crea el directorio utilizando el comando del sistema mkdir. Esto es útil para asegurarse de que un directorio necesario esté presente antes de realizar alguna operación que dependa de su existencia en tu script de Perl.\nA continuación: 1. El script entra en un bucle while que lee líneas del archivo abierto para lectura (I). Las líneas leídas se procesan de la siguiente manera: - Se eliminan los caracteres de retorno de carro \\r y las comillas dobles ” de cada línea. - Se extrae el valor entre paréntesis ( ) en la variable $sra. 2. Después, el script espera 2 segundos (con sleep 2) si no se encuentra un archivo con el nombre almacenado en $sra en el directorio actual o en el directorio “SRA”. Esto parece ser una pausa para dar tiempo a que el archivo se descargue antes de continuar. 3. Si el archivo no existe en ninguno de los dos directorios, se utiliza el comando system para descargar el archivo desde el sitio web del NCBI y guardarlo en el directorio “SRA”. 4. Luego, se abre el archivo recién descargado (SRA/\\$sra) y se procesa su contenido para extraer información relevante, como el número de lecturas, la cantidad de bases, el tipo de lecturas (pareadas o no), etc. 5. Se realiza una serie de transformaciones y cálculos en los datos extraídos, como la conversión de unidades de bases (K, M, G) a números enteros y el cálculo de la longitud promedio de las lecturas (\\$le). 6. Finalmente, se extraen más información de las variables \\$all_info1 y \\$all_info2, se formatea y se imprime en el archivo de salida (O) junto con otros datos procesados. 7. El script continúa procesando el siguiente conjunto de datos en el archivo de entrada hasta que se llega al final del archivo. 8. Finalmente, el script sale con la instrucción exit, lo que indica que ha terminado su tarea.\nEn resumen, este script se utiliza para descargar información sobre secuencias de ADN desde el NCBI, procesar esos datos y guardarlos en un archivo de salida para su posterior análisis."
  },
  {
    "objectID": "index.html#caso-1",
    "href": "index.html#caso-1",
    "title": "Como descargar datos de repositorios on-line",
    "section": "2.1 Caso 1",
    "text": "2.1 Caso 1\nEste primer caso es el que he estado utilizando como ejemplo hasta ahora mismo. Los datos serían los siguientes\n\n\n\nImagen 12\n\n\nSi nos fijamos tenemos un gran problema a resolver: El número de spots es muy bajo. SE significa que es Single End, es decir, que solo se ha hecho una lectura del fragmento (en dirección 3’-&gt;5’ por lo que el número de Spots es el número real de lecturas que se han hecho (luego veremos un ejemplo para Paird End, PE). Para un análisis adecuado de splicing alternativo necesitamos un mínimo de 100 M de spots (aunque podemos bajar a 75 M como mucho). Una posible solución es juntar muestras.\nOtro problema que tenemos con estos datos es que la Read_Average_Length tiene en algunas muestras menos de 50 y para un análisis de AS tenemos que tener una longitud de lectura de 50 de manera que esas muestras no las podemos utilizar, lo que reduce las posibilidades de poder llegar al mínimo al juntar las muestras.\nUna explicación más detallada del tratamiento de datos de este caso la podrás encontrar en la carpeta “Casos_Practicos_SA/Caso_1”."
  },
  {
    "objectID": "index.html#caso-2",
    "href": "index.html#caso-2",
    "title": "Como descargar datos de repositorios on-line",
    "section": "2.2 Caso 2",
    "text": "2.2 Caso 2\n\n\n\nImagen 13\n\n\nPodemos ver que en este caso no tenemos Library Name pero no pasa nada, no es imprescindible realmente. En este caso, la longitud de lectura es adecuada ya que todas tienen una media superior a 50. Tenemos una secuenciación SE (Single-End) de nuevo de manera que la Avg_Lenght es la que estamos viendo. Volvemos a tener el problema de tener un número de lecturas muy reducido pero en este caso cada muestra es una condición distinta de manera que agruparlas no sería correcto. En este caso no se podría realizar un análisis de SA."
  },
  {
    "objectID": "index.html#caso-3",
    "href": "index.html#caso-3",
    "title": "Como descargar datos de repositorios on-line",
    "section": "2.3 Caso 3",
    "text": "2.3 Caso 3\n\n\n\nImagen 14\n\n\nPodemos ver que en este caso no tenemos Library Name pero no pasa nada, no es imprescindible realmente. En este caso, tenemos una secuenciación Paird-end (PE) de manera que la longitud de lectura es adecuada es la mitad de lo que estamos viendo ya que en este tipo de secuenciación, la lectura se hace tanto en dirección 5’3’ como en dirección 3’5’. Este tipo de secuenciación es bastante más robusta y fiable que la SE. Todas tienen una media superior a 50 si dividimos el Avg_Lenght entre 2 (de hecho todos están sobre 80-90). Volvemos a tener el problema de tener un número de lecturas muy reducido pero en este caso si podemos intentar agrupar los pacientes mediante clustering no dirigido para agrupar en 3 y 4 aquellos que más se parezcan y así poder tener un análisis 2 vs 2. En este caso si se podría realizar un análisis de SA. Una explicación más detallada del tratamiento de datos de este caso la podrás encontrar en la carpeta “Casos_Practicos_SA/Caso_3”."
  },
  {
    "objectID": "index.html#caso-4",
    "href": "index.html#caso-4",
    "title": "Como descargar datos de repositorios on-line",
    "section": "2.4 Caso 4",
    "text": "2.4 Caso 4\n\n\n\nImagen 15\n\n\nEn este caso tenemos una cohorte de 8 pacientes todos ellos con la misma patología. Dado que no podemos ver condiciones entre ellos (a simple vista, podríamos buscar los fenotipos de los pacientes e identificar grupos de comparación) no es un buen ejemplo para comenzar a analizar."
  },
  {
    "objectID": "index.html#caso-5",
    "href": "index.html#caso-5",
    "title": "Como descargar datos de repositorios on-line",
    "section": "2.5 Caso 5",
    "text": "2.5 Caso 5\n\n\n\nImagen 16\n\n\nEn este caso, tenemos una secuenciación Paird-end (PE) de manera todas tienen una media superior a 50 si dividimos el Avg_Lenght entre 2 (de hecho todos están sobre 75). En este caso hay un número de lecturas bastante bueno, de entorno a 100 M todos ellos. En este caso se podría realizar un análisis de SA. De hecho es el mejor para empezar a practicar de manera que este será el Dataset que utilizaré para continuar el proceso y las explicaciones."
  },
  {
    "objectID": "RNAseq.html",
    "href": "RNAseq.html",
    "title": "Bulk RNAseq",
    "section": "",
    "text": "#Instalación de Mamba y Salmon (en terminal) En un primer momento íbamos a instalar Salmon (enlace a documentacion GitHub de Salmon) con Anaconda pero daba problemas a la hora de realizar la instalación de Salmon. Luego procedimos a la instalación de Mamba (Enlace a página de Mamaba y de e instalación) a través de Anaconda pero crasheaba en la instalación. Buscando en webs hemos encontrado que no es recomendable tener instalado Anaconda y Mamba a la vez de manera que hemos borrado los repositorios de Anacoda del servidor (y de miniconda, que tener miniconda y Anaconda no tenia ningún sentido porque Anaconda es más rápido y grande que miniconda de manera que era absurdo). Para eliminar tanto Anaconda (que se encontraba e la carpeta anaconda3) como Miniconda (que se encontraba en la carpeta miniconda3) hemos usado los siguientes comandos:\nrm -rf anaconda3/\nrm -rf miniconda3/\nYa podemos proceder a la instalación de Mamba. Es preferible la instalación de Mamba porque es como Anaconda pero con esteroides (según el bioinformático de Manuel Irimia). En primer lugar vamos a instalar Mamba:\ncurl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh\"\nA continuación podemos instalar el programa Salmon para el análisis de Bulk RNAseq con los siguientes comandos. Primero comprobamos qué versiones podemos instalar (para descargarnos la última versión):\nmamba search salmon\nNos saldrá un listado de versiones disponibles para la instalación de Salmon y tendremos que instalar la versión que queramos (en nuestro caso vamos a instalar la última versión, que corresponde a la 1.10.3):\nmamba create -n salmon salmon=1.10.2\nEs una buena práctica comprobar que se ha instalado de forma adecuada (activando Salmon y comprobando la versión:\nmamba activate salmon\nsalmon –version\nEl output será el siguiente:\nsalmon 1.10.2\nCerramos salmon:\nsalmon deactivate\nAdemás es buena práctica también comprobar que las instalaciones que hemos hecho previamente (en nuestro caso matt, vast-tools y SRA-Toolkit) no se han visto afectadas por la instalación de Mamba:\nvast-tools –help\nmatt –help\nfastq-dump --help\nYa podemos proceder a usar Salmon."
  },
  {
    "objectID": "RNAseq.html#generar-el-genoma-de-referencia",
    "href": "RNAseq.html#generar-el-genoma-de-referencia",
    "title": "Bulk RNAseq",
    "section": "1.1 Generar el genoma de referencia",
    "text": "1.1 Generar el genoma de referencia\nPara descarganos el genoma de referencia que queramos evaluar vamos a utilizar la base de datos Ensembl. En la web accedemos a la especie que queramos (en nuestro ejemplo Homo sapiens).\n\n\n\nImagen 1\n\n\nA continuación, es la sección de Gene_annotation seleccionamos la opción de descargarnos bases de datos en formato FASTA.\n\n\n\nImagen 2\n\n\nEsto nos llevará un repositorio donde tendremos distintas referencias del genoma:\n\nTranscritos (cdna/)\nRegiones codificantes (cds/)\nRegiones del genoma/cromosomas (dna/)\nParece un índice del anterior (dna/index)\nNon-coding RNA (ncrna/)\nPéptidos para proteómica (pep/)\n\n\n\n\nImagen 3\n\n\nLo habitual para cuantificar genes por RNAseq es descargarse los transcritos de manera que vamos a seleccionar “cdna/” y dentro de las opciones que hay en este en nuestro caso hemos elegido el indicado con rojo.\n\n\n\nImagen 4\n\n\nTenemos que clickar con el botón derecho y copiar la dirección de enlace para en nuestro terminal descargarnos este archivo con la función wget.\nLo más conveniente para llevar a cabo la descarga de genomas de referencia es crear una carpeta para esto, de manera que la creamos:\n\nmkdir Genome_Refs\n\nVamos a esta carpeta y usamos el comando wget:\n\nwget https://ftp.ensembl.org/pub/release-110/fasta/homo_sapiens/cdna/Homo_sapieCh38.cdna.all.fa.gz\n\nEsto nos descarga el .gz del genoma elegido en nuestra carpeta. Ahora generamos el índice con salmon:\n\nsalmon index -t Homo_sapiens.GRCh38.cdna.all.fa.gz -i Transcriptome_Index_Ref_Hsa_v38\n\nCon este comando decimos con “-t &lt;archivo.gz&gt;” el archivo que tiene que leer, que en nuestro caso es el que nos acabamos de descargar de Ensembl. Con el argumento -i  indicamos el nombre que le vamos a poner a este índice (el archivo que se va a generar). Es muy importante poner un nombre que permita discernir bien la especie, versión y tipo de alineamiento que permite hacer, en nuestro caso son todos los trancritos de la versión 38 del genoma humano así que le he puesto Transcriptome_Index_Ref_Hsa_v38. Este es el nombre que luego usaremos en la cuantificación. Ya que estaba me he dejado descargado los genomas de ratón (v.39) y rata (v.7.2) por si los necesitamos en algún momento."
  },
  {
    "objectID": "RNAseq.html#comprobar-la-calidad-de-las-muestras-secuenciadas-fastqc",
    "href": "RNAseq.html#comprobar-la-calidad-de-las-muestras-secuenciadas-fastqc",
    "title": "Bulk RNAseq",
    "section": "1.2 Comprobar la calidad de las muestras secuenciadas (fastQC)",
    "text": "1.2 Comprobar la calidad de las muestras secuenciadas (fastQC)\nEs de buena praxis comprobar la calidad de los resultados de la secuenciación debido a que esta puede introducir algún tipo de bias interno a la misma. Por ejemplo, un bias a corregir es el de contenido de GC, lo cual se corrige en el siguiente paso con salmon. Para correr un archivo hay que usar el siguiente comando:\n\nfastqc Basal_1_1.fastq.gz\n\nSi queremos que se nos guarde en un directorio, primero tenemos que crearlo de firma manual y luego utilizar el argumento -o &lt;nombre_del_directorio&gt;:\n\nmkdir resultados_fastqc\nfastqc -o resultados_fastqc Basal_1_1.fastq.gz\n\nEsto hace que se generen unos archivos HTML que nos llevará a una página en la que podemos ver la calidad de la muestra. Para conocer lo que significa cada uno de los apartados podemos acceder a este enlace y si queremos también tenemos un video tutorial donde se explica cada cosa. Si tenemos muchas muestras y queremos verlas todas juntas podemos utilizar la herramienta multiQC. Para utilizar esta herramienta la hemos instalado desde mamba y para ejecutarla (suponiendo que hemos generado la carpeta anterior “resultados_fastqc”) tenemos que ejecutar el comando seguido del nombre de la carpeta.\n\nmultiqc resultados_fastqc\n\nSi estamos en la misma carpeta donde se han generado todos los archivos fastqc (es decir, dentro de “resultados_fastqc” para nuestro ejemplo) el comando sería el siguiente:\n\nmultiqc .\n\n\n\n\n\n\n\nTip\n\n\n\n(hay un script hecho en el terminal para usarlo como plantilla para que lo haga automático todo)."
  },
  {
    "objectID": "RNAseq.html#alineamiento-y-cuantificación-con-salmon",
    "href": "RNAseq.html#alineamiento-y-cuantificación-con-salmon",
    "title": "Bulk RNAseq",
    "section": "1.3 Alineamiento y cuantificación con Salmon",
    "text": "1.3 Alineamiento y cuantificación con Salmon\nPara realizar la cuantificación tenemos que tener en cuenta el tipo de secuenciación que hemos realizado. La secuenciación para una muestra ha podido ser Single-End o Paired-End. Asimismo para una misma muestra se han podido secuenciar una única réplica o dos replicas para una mayor fiabilidad de la secuenciación. De esta manera, se han podido generar los siguientes archivos (se va a usar el nombre sample de ejemplo para explicar el número de archivos que podemos tener):\n\n\n\nImagen 5\n\n\nTeniendo esto en cuenta vamos a cuantificar nuestra muestras con la función “salmon quant” en el formato mapping-based mode (recordatorio de que tenemos que estar en el entorno salmon para hacer esto, el cual se activa con el comando “mamba actívate salmon” y que tenemos que estar en la carpeta donde tengamos las muestras descargadas). Para llevar a cabo la cuantificación el imput variará en función de la elección que hayamos cogido. Si hemos hecho Opción 1 o 2, es decir, solo hemos secuenciado una réplica de cada muestra, tenemos que usar el comando -r &lt;argumento&gt;. Para la Opción 1 el comando para la cuantificación sería el siguiente:\n\nsalmon quant -i transcripts_index -l A -r Sample_1.fastq.gz --validateMappings -o transcripts_quant\n\nDonde: - -i &lt;opción&gt;. Indica el genoma de referencia para hacer el mapeo (en nuestro ejemplo sería el nombre de la dirección del genoma humano que hemos descargado previamente, “/home/raul/Genome_Refs/Transcriptome_Index_Ref_Hsa_v38/”). Esta parte del comando será la misma para los siguientes opciones. - -l &lt;opción&gt;. Indica el formato en el que se han generado las librerías. Nosotros vamos a usar siempre la opción “A”, que es una opción de salmon que identifica el tipo de librería que hemos utilizado. Esta parte del comando será la misma para los siguientes opciones. - -r &lt;nombre_muestra&gt;. Aquí indicamos el nombre de nuestra muestra. Este argumento es el que variará posteriormente para analizar las distintas opciones. - --validateMapping. Permite que Salmon realice una validación adicional de los emparejamientos (mappings) entre las lecturas y las secuencias de referencia durante el proceso de cuantificación de expresión génica. Esta parte del comando será la misma para los siguientes opciones. - -o &lt;nombre_carpeta&gt;. Este argumento genera una carpeta con el nombre que pongamos tras el comando -o. Esta parte del comando será la misma para los siguientes\n\n\n\n\n\n\nTip\n\n\n\nNOTA: Si en el fastQC hemos tenido un enriquecimiento en GC tenemos que llevar a cabo una corrección de este error, de manera que tenemos que deberíamos añadir al comando anterior (independientemente de la opción de tipo de muestra que tengamos) el argumento --gcBias\n\n\nPara la Opción 2 el comando para la cuantificación sería el siguiente:\n\nsalmon quant -i transcripts_index -l A -1 Sample_1_1.fastq.gz -2 Sample_1_2.fastq.gz --validateMappings -o transcripts_quant\n\nDonde: - -i &lt;opción&gt;. Explicado en opción 1. - -l &lt;opción&gt;. Explicado en opción 1. - -1 &lt;nombre_muestra_1_1&gt;. Aquí indicamos el nombre del primer sentido de secuenciación de nuestra muestra.\n- -2 &lt;nombre_muestra_1_2&gt;. Aquí indicamos el nombre del segundo sentido de secuenciación de nuestra muestra. - --validateMapping. Explicado en opción 1. - -o &lt;nombre_carpeta&gt;. Explicado en opción 1.\nPara la Opción 3 el comando para la cuantificación sería el siguiente:\n\nsalmon quant -i transcripts_index -l A -r Sample_Rep1.fastq.gz Sample_Rep2.fastq.gz --validateMappings -o transcripts_quant\n\nDonde: - -i &lt;opción&gt;. Explicado en opción 1. - -l &lt;opción&gt;. Explicado en opción 1. - -r &lt;nombre_muestra_Replica_1 nombre_muestra_Replica_2&gt;. Aquí incluimos las dos replicas de nuestra muestra.\n- --validateMapping. Explicado en opción 1. - -o &lt;nombre_carpeta&gt;. Explicado en opción 1.\nPara la Opción 4 el comando para la cuantificación sería el siguiente:\nDonde: - -i &lt;opción&gt;. Explicado en opción 1. - -l &lt;opción&gt;. Explicado en opción 1. - -r &lt;nombre_muestra_Replica_1 nombre_muestra_Replica_2&gt;. Aquí incluimos las dos replicas de nuestra muestra. - -2 &lt;nombre_muestra_Replica_1_2 nombre_muestra_Replica_2_2&gt;. Aquí incluimos las dos segundas replicas de nuestra muestra. Es muy importante que las réplicas se ordenen igual que en el primer argumento -1. - --validateMapping. Explicado en opción 1. - -o &lt;nombre_carpeta&gt;. Explicado en opción 1.\nTras la explicación teórica, continuamos con nuestro archivo de ejemplo. Para procesar la primera muestra (Basal_1), el comando sería el siguiente:\n\nsalmon quant -i /home/raul/Genome_Refs/Transcriptome_Index_Ref_Hsa_v38/ -l A -1 Basal_1_1.fastq.gz -2 Basal_1_2.fastq.gz --validateMappings -o transcripts_quant\n\n\n\n\n\n\n\nCódigo para todas las muestras a la vez\n\n\n\n\n\nPara correr todas las muestras a la vez tenemos la opción de crear un script sencillito de bash para que se ejecuten todas las muestras que tenemos. Lo más cómodo es abrir un entorno screen para trabajar allí y luego poder desvincularlo por si nos tenemos que ir o algo, para que no se pare. Una vez abierto el screen, tenemos que abrir el entono salmon (mamba actívate salmon). Los pasos son los siguientes:\n\nCrear el script con el editor de texto nano\n\n\nnano run_Salmon_Mapping.bash\n\n\nEsto nos abre una pantalla en la que podemos escribir, ahí podremos escribir las funciones que queramos que se ejecuten:\n\n\n#!/bin/bash\n\n# Comando para procesar el archivo 1\nsalmon quant -i /home/raul/Genome_Refs/Transcriptome_Index_Ref_Hsa_v38/ -l A -1 Basal_1_1.fastq.gz -2 Basal_1_2.fastq.gz --validateMappings -o transcripts_quant/Basal_1\n\necho \"Basal_1 procesado\"\n\n# Comando para procesar el archivo 2\nsalmon quant -i /home/raul/Genome_Refs/Transcriptome_Index_Ref_Hsa_v38/ -l A -1 Basal_2_1.fastq.gz -2 Basal_2_2.fastq.gz --validateMappings -o transcripts_quant /Basal_2\n\necho \"Basal_2 procesado\"\n\n# Comando para procesar el archivo 3\nsalmon quant -i /home/raul/Genome_Refs/Transcriptome_Index_Ref_Hsa_v38/ -l A -1 Basal_3_1.fastq.gz -2 Basal_3_2.fastq.gz --validateMappings -o transcripts_quant/Basal_3\n\necho \"Basal_3 procesado\"\n\n# Comando para procesar el archivo 4\nsalmon quant -i /home/raul/Genome_Refs/Transcriptome_Index_Ref_Hsa_v38/ -l A -1 Luminal_1_1.fastq.gz -2 Luminal_1_2.fastq.gz --validateMappings -o transcripts_quant/Luminal_1\n\necho \"Luminal_1 procesado\"\n\n# Comando para procesar el archivo 5\nsalmon quant -i /home/raul/Genome_Refs/Transcriptome_Index_Ref_Hsa_v38/ -l A -1 Luminal_2_1.fastq.gz -2 Luminal_2_2.fastq.gz --validateMappings -o transcripts_quant Luminal_2\n\necho \"Luminal_2 procesado\"\n\n# Comando para procesar el archivo 6\nsalmon quant -i /home/raul/Genome_Refs/Transcriptome_Index_Ref_Hsa_v38/ -l A -1 Luminal_3_1.fastq.gz -2 Luminal_3_2.fastq.gz --validateMappings -o transcripts_quant/Luminal_3\n\necho \"Luminal_3 procesado\"\n\necho \"Procesamiento completado para todos los archivos\"\n\n\nEsto hará que se procese un archivo tras otro y se vaya guardando en una subcarpeta dentro de la carpeta que se va a crear transcripts_quant/subcarpeta_por_muestra, porque sino se sobreescribirá siempre la misma carpeta (habla la voz de la experiencia amigo/a….) y que cada vez que acabe un archivo nos salga un mensaje de que ya está procesado y cuando acaba nos dirá que ya se ha completado el proceso. Para guardar el archivo sigue estos pasos: 1) Presiona Ctrl + O (mantén presionada la tecla Control y luego presiona la letra “O”). Te preguntará File Name to Write. Presiona “Enter” para confirmar el nombre del archivo; 2) Para salir del editor nano, presiona Ctrl + X.\n\n\nPara ejecutar el archivo debemos asegurarnos de tener los permisos de ejecución del script:\n\n\nChmod +x run_Salmon_Mapping.bash\n\n\nYa podemos ejecutar el script (debemos de estar en la carpeta que lo contenga y tener el entorno de salmon abierto con (mamba actívate salmon))\n\n\n./run_Salmon_Mapping.bash\n\nTras esto podremos hacer Ctrl + a + d para desvincular la sesión de screen y esperar a que acabe.\n\n\n\nLos archivos quant.sf van a tener el siguiente contenido:\n\n\n\nImage 6\n\n\nLas columnas tienen la siguiente interpretación. - Name - Es el nombre del transcrito objetivo proporcionado en la base de datos de transcritos de entrada (archivo FASTA). - Length - Es la longitud del transcrito objetivo en nucleótidos. - EffectiveLength - Es la longitud efectiva calculada del transcrito objetivo. Tiene en cuenta todos los factores que se están modelando y que afectarán a la probabilidad de muestreo de fragmentos de este transcrito, incluyendo la distribución de la longitud del fragmento y el sesgo específico de la secuencia y del fragmento gc (si se están modelando). - TPM - Es la estimación del salmón de la abundancia relativa de este transcrito en unidades de Transcritos Por Millón (TPM). TPM es la medida de abundancia relativa recomendada para el análisis posterior. - NumReads - Es la estimación de Salmon del número de lecturas que corresponden a cada transcrito cuantificado. Es una “estimación” en la medida en que es el número esperado de lecturas que se han originado a partir de cada transcrito dada la estructura de las lecturas de mapeo único y mapeo múltiple y las estimaciones de abundancia relativa para cada transcrito.\n\n\n\n\n\n\nNote\n\n\n\nTodo lo hecho a partir de aquí está en Terminal_9-20-23.txt\n\n\nEl siguiente paso va a ser unir todos los archivos .sf en el que tenemos la cuantificación de cada una de las muestras para generar la matriz de datos para hacer los análisis.\nAl haber comparado con el transcriptoma de referencia, lo que nos va a generar salmon con cada uno de los archivos .sf es literalmente el transcriptoma, es decir, todos los transcritos de cada uno de los genes. Esto no es correcto analizarlo directamente. Es útil tener la información de cada uno de los transcritos de cada gen (especialmente si luego vamos a comparar con splicing alternativo) pero lo verdaderamente correcto es resumir y poner en conjunto la información de todos los transcrito para ver la expresión del gen en concreto. Para hacer esto tenemos que descargarnos un paquete de R que lo hace automáticamente. Además este paquete crea una matriz con todos los genes (en las filas) y todas las muestras que hemos analizado (en columnas) con salmon de manera que estaremos evaluando correctamente la expresión génica."
  },
  {
    "objectID": "RNAseq.html#importar-datos",
    "href": "RNAseq.html#importar-datos",
    "title": "Bulk RNAseq",
    "section": "3.1 Importar datos",
    "text": "3.1 Importar datos\nUna vez que hemos termimado de extraer las counts con salmon en el terminal y hemos generado un .csv con la expresión tenemos que instalar DESeq2, que es la herramienta que vamos a utilizar para normalizar y graficar los datos que hemos obtenido.\nPrimero instalamos todos lo paquetes que vamos a necesitar:\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"DESeq2\", dependencies = TRUE)\ninstall.packages(\"ggplot2\", dependencies = TRUE)\n#los siguientes paquetes son para representaciones y gestión de datos\ninstall.packages(\"pheatmap\", dependencies = TRUE)\ninstall.packages(\"RColorBrewer\", dependencies = TRUE)\ninstall.packages(\"tidyverse\", dependencies = TRUE)\nBiocManager::install(\"ashr\", dependencies = TRUE)\ninstall.packages(\"ggrepel\")\nBiocManager::install(\"EnsDb.Hsapiens.v86\", dependencies = TRUE)                \nBiocManager::install(\"biomaRt\", dependencies = TRUE)\nBiocManager::install(\"PCAtools\")\ninstall.packages(\"magick\")\n\nY cargamos las bibliotecas:\n\nlibrary(DESeq2)\nlibrary(ggplot2)\n#los siguientes paquetes son para representaciones de datos\nlibrary(pheatmap)\nlibrary(RColorBrewer)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ashr)\nlibrary(ggrepel)\nlibrary(EnsDb.Hsapiens.v86)\nlibrary(biomaRt)\nlibrary(PCAtools)\nlibrary(magick)\n\nAhora podemos cargar los datos que hemos generado el .csv:\n\n\nBasal_vs_Luminal_GC.csv\n\n\n\n\n\n\n\n\n\n\n\n\nBasal_1\nBasal_2\nBasal_3\nLuminal_1\nLuminal_2\nLuminal_3\n\n\n\n\nENSG00000000003\n3063.523\n2595.819\n1858.888\n5484.804\n5835.183\n5282.971\n\n\nENSG00000000005\n0.000\n1.000\n3.000\n0.000\n0.000\n0.000\n\n\nENSG00000000419\n5789.018\n3872.824\n4193.611\n4048.758\n2490.729\n3660.102\n\n\nENSG00000000457\n2009.020\n1613.409\n1420.251\n3384.663\n2402.486\n2763.960\n\n\nENSG00000000460\n614.459\n400.559\n455.363\n826.121\n505.659\n613.572\n\n\nENSG00000000938\n18.000\n93.000\n26.000\n9.000\n33.000\n8.000\n\n\n\n\n\n\n\n\n\n\nFormato de la metadata\n\n\n\nTenemos que crear un .csv de metada para poder analizar las distintas variables. Este archivo lo podemos crear mediante excel, en el cual en la primera columna tiene que estar el id de las muestras (el nombre que hayamos puesto a la muestra durante el análisis con salmon) y en el resto de columnos vamos metiendo variables de análisis. La primera fila tiene que tener el encabezado de la columna. Tenemos que asegurarnos de guardarlo en .csv y modificarlo desde el editor de texto para que esté verdaderamente separado con comas (ya que al crearlo en excel se nos guardará separado por “;”, en definitiva es hacer lo mismo que cuando queremos cargar algo en metaboanalyst).\n\n\nAhora podemos cargar el archivo que hemos creado con la metadata de las muestras. Tenemos que convertir en factor todas las variables que lo sean (no he probado con variables continuas):\n\nmetaData &lt;- as.data.frame(read.csv('Metadata_Basal_vs_Luminal.csv', header = TRUE, row.name=1, sep = \",\"))\nmetaData[,c(1:ncol(metaData))]&lt;-as.factor(metaData[,c(1:ncol(metaData))])\nhead(metaData)\n\n          cell_type\nBasal_1       Basal\nBasal_2       Basal\nBasal_3       Basal\nLuminal_1   Luminal\nLuminal_2   Luminal\nLuminal_3   Luminal\n\n\nVamos a introducir un paso de checkeo de que los nombres de las columnas de la matriz de datos y los nombre de las filas de matriz de MetaData están en el mismo orden para así estar seguros de que se van a cargar bien en el paquete:\n\nall(rownames(metaData) == colnames(countData))\n\n[1] TRUE\n\n\nA continuación vamos a crear el dataframe que contendrá el análisis con el siguiente comando:\n\ndds &lt;- DESeqDataSetFromMatrix(countData=round(countData), \n                              colData=metaData, \n                              design=~cell_type)\n\nconverting counts to integer mode\n\n\nCon el argumento countData definimos la variable en la que tenemos guardada la matriz de expresión de cada uno de los genes. Con el argumento colData vamos a definir el archivo en el que tenemos la metadata de las muestras. Con el argumento desing= vamos a definir cómo vamos a crear los grupos de comparación. Para ello tenemos que poner la virgulilla, es decir, “~” seguido del nombre de la columna que contenga la variable diferencial en la que basarse para crear los grupos. Si tuvieramos más grupos de interés para incluir en el análisis (tienen que estar incluidos en el archivo metadata) deberíamos añadirlos como en el siguiente ejemplo:\n\ndds &lt;- DESeqDataSetFromMatrix(countData=round(countData), \n                              colData=metaData, \n                              design=~cell_type + tissue + sex + age)\n\ncon este ejemplo, imaginando que pueden ser células de cualquier tejido, la comparación se calculará para tipo de células (cell_type), para el tipo de tejido (tissue), para el sexo del individuo (sex) y para la edad del mismo (age)."
  },
  {
    "objectID": "RNAseq.html#preprocesamiento-prefiltrado",
    "href": "RNAseq.html#preprocesamiento-prefiltrado",
    "title": "Bulk RNAseq",
    "section": "3.2 Preprocesamiento (prefiltrado)",
    "text": "3.2 Preprocesamiento (prefiltrado)\nSi bien no es necesario filtrar previamente los genes de conteo bajo antes de ejecutar las funciones de DESeq2, hay dos razones que hacen que el filtrado previo sea útil: al eliminar filas en las que hay muy pocas lecturas, reducimos el tamaño de la memoria del objeto de datos dds, y aumentamos la velocidad del modelado de conteo dentro de DESeq2. También puede mejorar las visualizaciones, ya que las características sin información para la expresión diferencial no se trazan en diagramas de dispersión o diagramas MA.\nAquí realizamos un filtrado previo para mantener solo las filas que tienen un recuento de al menos 10 para una cantidad mínima de muestras. El recuento de 10 es una opción razonable para la secuenciación de ARN masiva. Una recomendación para el número mínimo de muestras es especificar el tamaño de grupo más pequeño; por ejemplo, aquí hay 3 muestras tratadas. Si no hay grupos discretos, se puede utilizar el número mínimo de muestras donde los recuentos distintos de cero se considerarían interesantes. También se puede omitir este paso por completo y simplemente confiar en los procedimientos de filtrado independientes.\n\nsmallestGroupSize &lt;- 3\nkeep &lt;- rowSums(counts(dds) &gt;= 10) &gt;= smallestGroupSize\ndds &lt;- dds[keep,]\n\nA continuación es importante establecer cuál va a ser el grupo de control de los que tenemos (en nuestro caso van a ser las células basales):\n\ndds$condition&lt;-relevel(dds$cell_type, ref=\"Basal\")\n\nEl análisis de expresión diferencial propiamente dicho lo hacemos con la función DESeq(), y ya calcula muchas cosas (de forma automática) de las que vamos a ir viendo ahora. Pero para mejorar el entendimiento del trabajo con los datos no vamos a adelantar aconteciminetos, así que por ahora no lo vamos a usar y vamos a ver como se normalizan estos datos.\nLa función DESeq() realiza de forma automática los siguientes análisis:\n\nEstimar los “size factors” (el peso que tiene en la dispersión de los valores de cada muestra la variable que estamos utilizando para la comparación)\nEstimar la dispersión génica (como aumenta la variabilidad en función del número de transcritos, esto es intrínseco a la metodología de manera que hay que corregirlo)\nCorregir la dispersión génica (se realiza con estimaciones con respecto al modelo al que debería ajustarse la disperisón de los datos, pero como toda estimación, necesita ser corregiva para evitar sobreestimaciones, es decir, falsos positivos)\nReducción de las estimaciones de la dispersión por la corrección"
  },
  {
    "objectID": "RNAseq.html#análisis-de-calidad-de-las-muestras-qc-analyses",
    "href": "RNAseq.html#análisis-de-calidad-de-las-muestras-qc-analyses",
    "title": "Bulk RNAseq",
    "section": "3.3 Análisis de calidad de las muestras (QC Analyses)",
    "text": "3.3 Análisis de calidad de las muestras (QC Analyses)\nLos siguientes pasos son la normalización y análisis no supervisado de las muestras para evaluar la calidad de las mismas.\n\n3.3.1 Normalización\nVamos a seguir los pasos del workshop de Harvard que encontré (que está genial), en este caso vamos a usar el archivo Introduction to DGE donde está super bien explicado a nivel teórico (con esquemas y todo). Si queremos mayor profundidad a nivel matemáticod beremos acceder a la vignette de DESeq2. El primer paso de todo análisis de expresión diferencial es una normalización de los counts para que la comparación entre muestras sea más certera y fiable. Los pricipales factores que se deben de considerar para la normalización son:\n\nProfuncidad de la secuenciación\nLongitud del gen\nComposición del RNA\n\nEstos términos están perfectamente explicados en Introduction to DGE, además incluye una tabla con los métodos de normalización para RNAseq con ventajas y desventajas.\nDESeq2 utiliza un método de normalización de las counts dividads por factores de tamaño específicos de la muestra determinados por la relación mediana de los recuentos de genes en relación con la media geométrica por gen. Esta normalización hace que sea muy potente para la el análsis de expresión diderencial, pero no lo podemos utilizar para una comparación entre genes de una misma muestra\n\n\n\n\n\n\nNote\n\n\n\n(para eso deberíamos utilizar la expresión normalizada por TPM, es decir, utilizar la matriz de tximpor recupenrando los datos de la columna de “abundancia”). Perfectamente explicado, de nuevo, en Introduction to DGE.\n\n\nPara acceder a los size factors si hubieramos utilizado la función DESeq() podriamos utilizar la función sizeFactors directamente:\n\n#hacemos el análisis y lo definimos en la varibale dds_DEs\ndds_DEs&lt;-DESeq(dds)\n#y ahora extraeríamos los datos\nsizeFactors(dds_DEs)\n\nPero como todavía NO hemos utilizado todavía la función DEseq() y queremos averiguar los “size factors” de nuestra matriz, primero temnemos que usar la función estimateSizeFactors() para calcular dichos factores e incluirlos en el data frame dds. El código sería el siguiente:*\n\n#Calculamos los factores y lo metemos en la variable dds\ndds &lt;- estimateSizeFactors(dds)\n#y ahora podríamos acceder a esos datos\nsizeFactors(dds)\n\n  Basal_1   Basal_2   Basal_3 Luminal_1 Luminal_2 Luminal_3 \n1.1167981 1.0037478 0.9737041 1.0030643 0.9418799 0.9892795 \n\n\nAhora podríamos extraer los datos normalizados (con la función counts() en una matriz de datos distinta para así poder trabajar con ellos:\n\nnormalized_counts&lt;-counts(dds, normalized=TRUE)\nhead(normalized_counts)\n\n                   Basal_1    Basal_2    Basal_3   Luminal_1  Luminal_2\nENSG00000000003 2743.55778 2586.30696 1909.20427 5468.243490 6195.05740\nENSG00000000419 5183.56918 3858.53884 4307.26343 4036.630427 2644.71088\nENSG00000000457 1798.89281 1606.97732 1458.34861 3374.658927 2550.21900\nENSG00000000460  549.78606  399.50273  467.28776  823.476595  537.22349\nENSG00000000938   16.11751   92.65275   26.70216    8.972505   35.03631\nENSG00000000971 4315.91008 3637.36776 2018.06691 6813.122335 3766.93464\n                  Luminal_3\nENSG00000000003 5340.250419\nENSG00000000419 3699.662414\nENSG00000000457 2793.952709\nENSG00000000460  620.653749\nENSG00000000938    8.086694\nENSG00000000971 2155.103898\n\n\nVamos a extraer estos datos normalizados en un archivo para utilizarlos más adelante:\n\nwrite.csv(normalized_counts, file=\"/normalized_counts.csv\")\n\n\n\n\n\n\n\nNote\n\n\n\nDESeq2 no utiliza realmente counts normalizadas, sino que utiliza los counts brutos y modela la normalización dentro del Modelo Lineal Generalizado (GLM). Estos recuentos normalizados serán útiles para la visualización posterior de los resultados, pero no se pueden utilizar como entrada para DESeq2 o cualquier otra herramienta que realice análisis de expresión diferencial que utilice el modelo binomial negativo.\n\n\n\n\n3.3.2 Análisis de clustering no supervisado\nPara realizar el análisis de calidad de las muestras necesitamos la matriz de datos normalizados. DESeq incluye una función propia de normalización de datos muy robusta y aceptada por la comunidad, que si quereis saber cómo funciona podeis ir a la vignette de DESeq2 o a la página que os recomendé al principio que explica todo el workflow, es este caso a la sección de “QC Analysis” y leerlo: En mi caso he usado una combinación de ambas cosas para evaluar más parámetros. Para ejecutarla:\n\nrld &lt;- rlog(dds, blind=FALSE)\n\nEl argumento blind= es para saber si la transformación debe ser ciega a la información de la muestra especificada por la fórmula de diseño. Cuando ciego es igual a TRUE (por defecto), las funciones reestimarán las dispersiones utilizando sólo un intercepto. Este argumento debería utilizarse para comparar muestras de una manera totalmente insesgada por la información sobre los grupos experimentales, por ejemplo para realizar el aseguramiento de la calidad de la muestra, como se demuestra a continuación.\nSin embargo, la estimación de la dispersión ciega no es la opción adecuada si se espera que muchos o la mayoría de los genes (filas) tengan grandes diferencias en los recuentos que puedan explicarse por el diseño experimental, y se desea transformar los datos para un análisis posterior. En este caso, el uso de la estimación ciega de la dispersión dará lugar a grandes estimaciones de la dispersión, ya que atribuye las diferencias debidas al diseño experimental como ruido no deseado, y dará lugar a una reducción excesiva de los valores transformados entre sí. Estableciendo ciego a FALSE, las dispersiones ya estimadas se utilizarán para realizar las transformaciones, o si no están presentes, se estimarán utilizando la fórmula de diseño actual. Tenga en cuenta que en la transformación sólo se utilizan las estimaciones de dispersión ajustadas de la línea de tendencia media-dispersión (la dependencia global de la dispersión respecto a la media para todo el experimento). Por lo tanto, establecer ciego a FALSE sigue siendo, en su mayor parte, no utilizar la información sobre qué muestras estaban en qué grupo experimental en la aplicación de la transformación.\nEn resumen, que seleccionemos FALSE.\nNOTA: La función rlog() puede ser un poco lenta cuando se tienen, por ejemplo, &gt; 20 muestras. En estas situaciones, la función vst() es mucho más rápida y realiza una transformación similar apropiada para su uso para análisis de calidad.\n\n3.3.2.1 Barplot\nCon estas gráficas vamos a mostrar el nº de counts totales para cada muestra para asegurarnos de que no están muy dispares, por lo que se utilizan los datos importados del .csv previos a la normalización (ya que solo queremos counts). para ello tenemso que trasformar los datos a dos columnas (x, el cual va a ser el nombre de la muestra, e y, que va a ser el valor de la suma de los counts de cada muestra) que son las que utilizaremos para realizar el gráfico:\n\n#Para llevar a cabo esta parte tenemos que instalar y cargar el paquete tidyverse\nsum_CD&lt;-as.data.frame(normalized_counts) %&gt;%\n  gather(columname, values) %&gt;%\n  group_by(columname) %&gt;%\n  summarize(Count_sum=sum(values))\n#\nggplot(sum_CD, aes(x=as.factor(columname), y=Count_sum))+\n  geom_bar(stat=\"identity\")+\n  ggtitle(\"Total number of counts\")+\n  xlab(\"Muestras\")+\n  ylab(\"Normalized counts\")+\n  theme(legend.position=\"right\")+\n  geom_text(aes(label=round(Count_sum)), color=\"white\", vjust=1.6, size=4)\n\n\n\n\nUna alternativa (simplemente para ver el explorar el uso de ggplot():\n\nsum_CD&lt;-as.data.frame(normalized_counts) %&gt;%\n  gather(columname, values) %&gt;%\n  group_by(columname) %&gt;%\n  summarize(Count_sum=sum(values))\n\n#tenemos que tranformar los datos para que sea interpretable por ggplot\nggplot(sum_CD, aes(x=as.factor(columname), y=Count_sum, fill=Count_sum))+\n     geom_bar(stat=\"identity\") +\n     scale_fill_gradientn(colors=pals::brewer.greens(15),\n                           lim=c(0,max(sum_CD$Count_sum)))+\n     ggtitle(\"Total number of counts\")+\n     xlab(\"Muestras\")+\n     ylab(\"Raw counts\")+\n     theme(legend.position=\"right\")+\n     geom_text(aes(label=round(Count_sum)), color=\"white\", vjust=1.6, size=3)\n\n\n\n\nSi quisieramos guardar la anterior gráfica como un documento tendremos que usar la función ggsave(), guardando la gráfica en una variable barplotcounts:\n\nbarplotcounts&lt;-ggplot(sum_CD, aes(x=as.factor(columname), y=Count_sum, fill=Count_sum))+\n  geom_bar(stat=\"identity\") +\n     scale_fill_gradientn(colors=pals::brewer.greens(15),\n                           lim=c(0,max(sum_CD$Count_sum)))+\n     ggtitle(\"Total number of counts\")+\n     xlab(\"Muestras\")+\n     ylab(\"Raw counts\")+\n     theme(legend.position=\"right\")+\n     geom_text(aes(label=round(Count_sum)), color=\"white\", vjust=1.6, size=3)\n\nggsave(barplotcounts,filename=\"barplotcounts.pdf\", device=pdf)\n\n\n\n3.3.2.2 boxplot\nTambien podemos hacer un boxplot de los counts de las muestras normalizadas con (log10(count)+1) y ver la distribución. Esto lo podemos hacer con la función boxplot:\n\nboxplot(log10(normalized_counts)+1,\n  main=\"Boxplot\", xlab=\"Muestras\", ylab=\"Normalized counts Log10(Counts)+1\")\n\n\n\n\nO con ggplot(), Pero para hacerlo con ggplot primero necesitamos crear una matriz interpretable por ggplot para generar el gráfico. Para ello vamos a usar el paquete tidyvese(), que generará una matriz de datos que podremos utilizar (transformación a matriz larga):\n\n#definimos la normalización para la representación como una variable independiente para trabajar de forma más sencilla.\nnormcounts&lt;-as.data.frame(log10(normalized_counts)+1)\n\n#a continuación creamos la matriz larga\nlong_df&lt;-normcounts %&gt;%\n  rownames_to_column(var=\"rowname\") %&gt;%\n  gather(columname, value, -rowname)\n#definimos el nombre de las columnas\ncolnames(long_df)&lt;-c(\"Ensembl_ID\", \"Samples\", \"Expression\")\n#también tenemos que definir las muestras como un factor para que boxplot funcione bien\nlong_df$Samples&lt;-as.factor(long_df$Samples)\n\n#ahora graficamos con ggplot\nggplot(long_df, aes(x=Samples, y=Expression)) + geom_boxplot() +\n  ggtitle(\"Boxpot\") +\n  xlab(\"Samples\") + ylab(\"Normalized expression \\n log(counts)+1\")\n\n\n\n\nCon ggplot es mucho más manejable el hacer gráficos.\n\n\n3.3.2.3 PCA plot\nDESe2 utiliza el paquete ggplot2 para generar gráficos. Para poder hacer el gráfico por defecto necesitamos los datos normalizados (lo que hemos hecho con la función rlog()). Por defecto podemos hacer una gráfica sencilla:\n\nplotPCA(rld, intgroup=\"cell_type\")\n\n\n\n\nTambién podemos customizar la gráfica con funciones del paquete ggplot2:\n\npcaData &lt;- plotPCA(rld, intgroup=c(\"cell_type\", \"cell_type\"), returnData=TRUE)\npercentVar &lt;- round(100 * attr(pcaData, \"percentVar\"))\nggplot(pcaData, aes(PC1, PC2, color=cell_type, shape=cell_type)) +\n  ggtitle(\"PCA plot of example \\n RNAseq\")+\n  geom_point(size=3) +\n  xlab(paste0(\"PC1 (\",percentVar[1],\"%)\")) +\n  ylab(paste0(\"PC2 (\",percentVar[2],\"%)\")) + \n  coord_fixed()\n\n\n\n\n\n\n3.3.2.4 Heatmap\nTambién es común utilizar un heatmap para la visualización de la calidad de las muestras para ver como clusterizan:\n\n#para utilizar esta función hemos tenido que instalar y cargar el paquete pheatmap\nselect&lt;-order(rowMeans(normalized_counts),decreasing=TRUE)[1:25]\ndf &lt;- metaData\npheatmap(assay(rld)[select,], cluster_rows=FALSE, show_rownames=FALSE,\n         cluster_cols=TRUE, annotation_col=df, main=\"Heatmap plot\")\n\n\n\n\nSi tuvieramos mayor cantidad de datos clínicos o variables en metadata podríamos añadirlos de la siguiente manera (yo voy a repetir el mismo tipo de datos dos veces):\n\n#voy a crear una nueva metadata que tenga dos veces la misma columna de cell_type para mostrar el ejemplo\nmetaData_ejm &lt;- metaData\nmetaData_ejm[,2]&lt;- metaData[, 1]\ncolnames(metaData_ejm)[2]&lt;- c(\"variable imaginaria\")\n#y ahora haríamos el heatmap\nselect&lt;-order(rowMeans(normalized_counts),decreasing=TRUE)[1:500]\n#en el df tenemos que meter las variables de nuestra metaData que queramos ver\ndf &lt;- metaData_ejm[,c(1, 2)]\npheatmap(assay(rld)[select,], cluster_rows=FALSE, show_rownames=FALSE,\n         cluster_cols=FALSE, annotation_col=df, main=\"Heatmap plot\")\n\n\n\n\nHay muchas posibilidades, buscad el paquete en google y consultais los argumentos para manipular los datos al gusto.\n\n\n3.3.2.5 Distancia entre muestras\nOtro uso de los datos transformados es la agrupación de muestras. En este caso, aplicamos la función dist() a la transposición de la matriz de recuento transformada para obtener distancia muestra-muestra:\n\nsampleDists &lt;- dist(t(assay(rld)))\n\nA continuación, si solo tenemos las muestras con una condición queremos enfrentar las muestras contra ellas mismas de manera que haríamos lo siguiente:\n\nsampleDistMatrix &lt;- as.matrix(sampleDists)\nrownames(sampleDistMatrix) &lt;- rld@colData@rownames\ncolnames(sampleDistMatrix) &lt;- rld@colData@rownames\ncolors &lt;- colorRampPalette( rev(brewer.pal(9, \"Blues\")) )(255)\npheatmap(sampleDistMatrix,\n         clustering_distance_rows=sampleDists,\n         clustering_distance_cols=sampleDists,\n         col=colors)\n\n\n\n\nSi tuvieramos dos o más condiciones descriptivas (en mi caso voy a repetir dos veces el tipo celular para que se pueda ver cómo se usaría el código para emparejar variables para la comparación):\n\n#Para estos colores hemos tenido que instalar y cargar el paquete \"RColorBrewer\"\nsampleDistMatrix &lt;- as.matrix(sampleDists)\nrownames(sampleDistMatrix) &lt;- paste(rld$cell_type, rld$cell_type, sep=\"-\")\ncolnames(sampleDistMatrix) &lt;- NULL\ncolors &lt;- colorRampPalette( rev(brewer.pal(9, \"Blues\")) )(255)\npheatmap(sampleDistMatrix,\n         clustering_distance_rows=sampleDists,\n         clustering_distance_cols=sampleDists,\n         col=colors)\n\n\n\n\nEn el heatmap podemos ver las distancias, lo que nos da una overview sobre similaridades y diferencias entre muestras."
  },
  {
    "objectID": "RNAseq.html#análisis-de-expresión-diferencial-de-analysis",
    "href": "RNAseq.html#análisis-de-expresión-diferencial-de-analysis",
    "title": "Bulk RNAseq",
    "section": "3.4 Análisis de Expresión diferencial (DE analysis)",
    "text": "3.4 Análisis de Expresión diferencial (DE analysis)\nBrevemente, DESeq2 modelará los recuentos brutos, utilizando factores de normalización (factores de tamaño) para tener en cuenta las diferencias en la profundidad de las bibliotecas. A continuación, estimará las dispersiones por genes y reducirá estas estimaciones para generar estimaciones más precisas de la dispersión para modelar los recuentos. Por último, DESeq2 ajustará el modelo binomial negativo y realizará pruebas de hipótesis utilizando el test de Wald o Likelihood Ratio Test (prueba de razón de verosimilitud).\nLa función DESeq() realiza de forma automática los siguientes análisis:\n\nEstimar los “size factors” (el peso que tiene en la dispersión de los valores de cada muestra la variable que estamos utilizando para la comparación)\nEstimar la dispersión génica (como aumenta la variabilidad en función del número de transcritos, esto es intrínseco a la metodología de manera que hay que corregirlo)\nCorregir la dispersión génica (se realiza con estimaciones con respecto al modelo al que debería ajustarse la disperisón de los datos, pero como toda estimación, necesita ser corregiva para evitar sobreestimaciones, es decir, falsos positivos)\nReducción de las estimaciones de la dispersión por la corrección\n\n\ndds_DEs&lt;-DESeq(dds)\n\nusing pre-existing size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\nhead(dds_DEs)\n\nclass: DESeqDataSet \ndim: 6 6 \nmetadata(1): version\nassays(4): counts mu H cooks\nrownames(6): ENSG00000000003 ENSG00000000419 ... ENSG00000000938\n  ENSG00000000971\nrowData names(22): baseMean baseVar ... deviance maxCooks\ncolnames(6): Basal_1 Basal_2 ... Luminal_2 Luminal_3\ncolData names(3): cell_type condition sizeFactor\n\n\n\n3.4.1 Modelado de las counts para cada gen y Fold changes corregidos\n\n3.4.1.1 Generación de un modelo linaear de ajuste para cada gen\nEl último paso del flujo de trabajo de DESeq2 es ajustar el modelo binomial negativo para cada gen y realizar pruebas de expresión diferencial.\nComo se ha comentado anteriormente, los datos de recuento generados por RNA-seq presentan sobredispersión (varianza &gt; media) y la distribución estadística utilizada para modelar las “counts” debe tener en cuenta esta sobredispersión. DESeq2 utiliza una distribución binomial negativa para modelar los recuentos de RNA-seq.\nEl modelado es una forma matemática de aproximar cómo se comportan los datos dado un conjunto de parámetros (es decir, factor de tamaño, dispersión). DESeq2 utilizará esta fórmula como modelo para cada gen y ajustará a ella los datos de “counts” normalizados. Una vez ajustado el modelo, se estiman los coeficientes para cada grupo de muestras junto con su error estándar.\nLos coeficientes son las estimaciones de los cambios de log2 para cada grupo de muestras. Sin embargo, estas estimaciones no tienen en cuenta la gran dispersión que observamos en los recuentos bajos de lecturas. Para evitarlo, es necesario ajustar los cambios de pliegue log2 calculados por el modelo.\n\n\n3.4.1.2 Shrunken Log2 Foldchanges (LFC)\nPara generar una estimación más precisa de log2 Fold Change (LFC), DESeq2 permite la reducción de las estimaciones LFC hacia cero cuando la información de un gen es baja:\n\nPocas counts\nElevados valores de dispersión\n\nAl igual que con la reducción de las estimaciones de dispersión, la reducción de LFC utiliza información de todos los genes para generar estimaciones más precisas. En concreto, la distribución de las estimaciones de LFC para todos los genes se utiliza (como un prior) para encoger las estimaciones de LFC de los genes con poca información o alta dispersión hacia estimaciones de LFC más probables (más bajas).\nPara generar esta estimación del LFC, hay que correr la función adicional (lfcSrink()).\n\n\n\n\n\n\nNote\n\n\n\nLa reducción de los cambios de pliegues log2 no cambiará el número total de genes que se identifican como significativamente expresados de forma diferencial. La reducción del cambio de pliegue es para ayudar con la evaluación posterior de los resultados. Por ejemplo, si desea subconjuntar sus genes significativos basándose en el cambio de pliegue para una evaluación posterior, puede que desee utilizar los valores shruken. Además, para las herramientas de análisis funcional como GSEA que requieren valores de cambio de pliegue como entrada, usted querría proporcionar valores reducidos.\n\n\n\n\n\n3.4.2 Evaluación de la expresión diferencial\nEl primer paso en la prueba de hipótesis es establecer una hipótesis nula para cada gen. En nuestro caso, la hipótesis nula es que no hay expresión diferencial en los dos grupos de muestras (LFC == 0). En segundo lugar, utilizamos una prueba estadística para determinar si, basándonos en los datos observados, la hipótesis nula es cierta.\nCon DESeq2, el Test de Wald se utiliza habitualmente para la comprobación de hipótesis cuando se comparan dos grupos. Se calcula un estadístico de Test de Wald junto con una probabilidad (p-valor) de que se seleccionara al azar un estadístico de prueba al menos tan extremo como el valor observado. Si el valor p es pequeño, rechazamos la hipótesis nula y afirmamos que existen pruebas en contra de la nula (es decir, que el gen se expresa de forma diferencial).\n\n3.4.2.1 Crear los grupos de comparación\nPara indicar a DESeq2 qué dos grupos queremos comaprar, usamos la función contrasts(), la está integrada en DESeq2 para realizar este Test de Wald entre dos grupos de comparación. Las variables a comparar se pueden dar en DESeq de dos formas distintas:\n\nNo haciendo nada. Por defecto, DESeq2 utiliza el factor base de la condición de interés. El factor base de la condición de interés lo selecciona de forma alfabética.\nCon la función results() podemos definir la comparación de interés. El factor dado en último lugar se definirá como el factor base de la comparación. Para asegurarnos de tener nuestra comparación de interés usaremos esta opción. La sintaxis sería la siguiente:\n\n\n#Definimos la condición a evaluar, el factor a comparar y el factor base (en ese orden), en una variable\ncontrast&lt;-c(\"cell_type\", \"Luminal\",\"Basal\")\n\n#Ahora generamos los resultados y la guardamos en una variable nueva para utilzarlos luego\nres&lt;-results(dds_DEs, contrast = contrast, alpha = 0.05)\n\n#Visualizamos res:\nhead(res)\n\nlog2 fold change (MLE): cell_type Luminal vs Basal \nWald test p-value: cell type Luminal vs Basal \nDataFrame with 6 rows and 6 columns\n                 baseMean log2FoldChange     lfcSE      stat      pvalue\n                &lt;numeric&gt;      &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;   &lt;numeric&gt;\nENSG00000000003 4040.4367       1.231831  0.219235  5.618779 1.92312e-08\nENSG00000000419 3955.0625      -0.362824  0.254226 -1.427170 1.53531e-01\nENSG00000000457 2263.8416       0.841835  0.204578  4.114984 3.87207e-05\nENSG00000000460  566.3217       0.483936  0.274408  1.763562 7.78057e-02\nENSG00000000938   31.2613      -1.380236  0.972290 -1.419572 1.55732e-01\nENSG00000000971 3784.4176       0.352932  0.488092  0.723085 4.69627e-01\n                       padj\n                  &lt;numeric&gt;\nENSG00000000003 5.89919e-07\nENSG00000000419 3.41626e-01\nENSG00000000457 4.48258e-04\nENSG00000000460 2.12177e-01\nENSG00000000938 3.44979e-01\nENSG00000000971 7.05029e-01\n\n\n\n\n\n\n\n\nNote\n\n\n\nEl Test de Wald tambien puede utilizar variables contínuas. Si la variable de interés dada en el diseño (con el argumento desing cuando realizamos el DESeqDataSetFromMatrix) es contínua, el report del LFC se realizará por unidad de cambio en esa variable\n\n\n\n\n3.4.2.2 Contracción de la tabla de resultados\nPara construir nuestra tabla de resultados utilizaremos la función results(). Para indicar a DESeq2 los grupos que deseamos comparar, introduciremos los contrastes que deseamos realizar mediante el argumento contrast. Para este ejemplo, guardaremos las versiones no reducidas y reducidas de los resultados en variables separadas. Además, incluimos el argumento alfa y lo establecemos en 0,05. Este es el límite de significación utilizado para el análisis de la varianza. Este es el límite de significación utilizado para optimizar el filtrado independiente (por defecto se establece en 0,1). Si el valor de corte p ajustado (FDR) será un valor distinto de 0,1 (para nuestra lista final de genes significativos), alfa debe fijarse en ese valor (alfa = 0.05).\n\n#puede ser que necesitemos instalar el paquete \"ashr\" desde Bioconductor\n#Creamos la tabla de resultados\nres_table &lt;- lfcShrink(dds_DEs, contrast=contrast, res=res, type=\"ashr\")\n\n#visualizamos la tabla de resultados\nhead(res_table)\n\nlog2 fold change (MMSE): cell_type Luminal vs Basal \nWald test p-value: cell type Luminal vs Basal \nDataFrame with 6 rows and 5 columns\n                 baseMean log2FoldChange     lfcSE      pvalue        padj\n                &lt;numeric&gt;      &lt;numeric&gt; &lt;numeric&gt;   &lt;numeric&gt;   &lt;numeric&gt;\nENSG00000000003 4040.4367       1.127634  0.228829 1.92312e-08 5.89919e-07\nENSG00000000419 3955.0625      -0.254933  0.222360 1.53531e-01 3.41626e-01\nENSG00000000457 2263.8416       0.734814  0.205440 3.87207e-05 4.48258e-04\nENSG00000000460  566.3217       0.336907  0.244572 7.78057e-02 2.12177e-01\nENSG00000000938   31.2613      -0.376240  0.601387 1.55732e-01 3.44979e-01\nENSG00000000971 3784.4176       0.157092  0.334196 4.69627e-01 7.05029e-01\n\n\n\n\n3.4.2.3 ¿Por qué usar el p-valor ajustado en vez del p-valor?\nEn results() tenemos p valores y p valores ajustados. ¿Cuál deberíamos utilizar para identificar los genes expresados de forma significativamente diferente?\nSi utilizamos el p valor directamente de la prueba de Wald con un corte de significación de p &lt; 0,05, significa que hay un 5% de posibilidades de que sea un falso positivo. Cada valor p es el resultado de una sola prueba (un solo gen). Cuantos más genes probemos, más inflamos la tasa de falsos positivos. Este es el problema de las pruebas múltiples. Por ejemplo, si probamos 20.000 genes en busca de expresión diferencial, a p &lt; 0,05 esperaríamos encontrar 1.000 genes por azar. Si encontramos un total de 3.000 genes con expresión diferencial, aproximadamente un tercio de nuestros genes son falsos positivos. No querríamos cribar nuestros genes “significativos” para identificar cuáles son los verdaderos positivos.\nDESeq2 ayuda a reducir el número de genes analizados mediante la eliminación de aquellos genes con pocas probabilidades de ser significativamente DE antes de la prueba, como aquellos con bajo número de recuentos y muestras atípicas (QC a nivel de genes). Sin embargo, aún necesitamos corregir las pruebas múltiples para reducir el número de falsos positivos, y existen algunos enfoques comunes:\n\nBonferroni: The adjusted p-value is calculated by: p-value * m (m = total number of tests). This is a very conservative approach with a high probability of false negatives, so is generally not recommended.\nFDR/Benjamini-Hochberg: Benjamini and Hochberg (1995) defined the concept of FDR and created an algorithm to control the expected FDR below a specified level given a list of independent p-values. An interpretation of the BH method for controlling the FDR is implemented in DESeq2 in which we rank the genes by p-value, then multiply each ranked p-value by m/rank.\nQ-value / Storey method: The minimum FDR that can be attained when calling that feature significant. For example, if gene X has a q-value of 0.013 it means that 1.3% of genes that show p-values at least as small as gene X are false positives\n\nEn DESeq2, los p valores obtenidos mediante la prueba de Wald se corrigen por defecto para pruebas múltiples utilizando el método de Benjamini y Hochberg. Existen opciones para utilizar otros métodos en la función results(). Los p valores ajustados deben utilizarse para determinar los genes significativos. Los genes significativos pueden mostrarse para su visualización y/o análisis funcional.\n\n\n\n\n\n\nEntonces, ¿qué significa FDR &lt; 0.05?\n\n\n\n\n\nAl establecer el límite FDR en &lt; 0,05, estamos diciendo que la proporción de falsos positivos que esperamos entre nuestros genes expresados diferencialmente es del 5%. Por ejemplo, si llama a 500 genes como expresados diferencialmente con un corte FDR de 0,05, espera que 25 de ellos sean falsos positivos.\n\n\n\n\n\n3.4.2.4 MA plot\nEl gráfico MA muestra la media de los recuentos normalizados frente a los cambios de pliegues log2 para todos los genes analizados. Los genes que son significativamente DE están coloreados para ser fácilmente identificados. Esta es también una buena manera de ilustrar el efecto de la contracción de LFC. El paquete DESeq2 ofrece una función sencilla para generar un gráfico MA.\nPara ver de forma visual en lo que consiste el ajuste de estimación que hemos hecho en el paso anterior vamos a hacer el MA plot (con la función plotMA()) con los datos sin corregir:\n\nplotMA(res, ylim=c(-5,5))\n\n\n\n\nY ahora tras ejecutar el ajuste de estimación:\n\nplotMA(res_table, ylim=c(-5,5))\n\n\n\n\n\n\n3.4.2.5 Extracción de los genes diferencialmente expresados\nCon la gran lista de genes significativos puede ser difícil extraer una relevancia biológica significativa. Para ayudar a aumentar el rigor, también se puede añadir un umbral de cambio de pliegue. La función summary() no tiene un argumento para el umbral de cambio de pliegue.\nPrimero creemos variables que contengan nuestros criterios de umbral:\n\npadj.cutoff &lt;- 0.05\nlfc.cutoff &lt;- 0.58\n#El lfc.cutoff() se establece en 0,58; recuerda que estamos trabajando con Fold Changes en log2, por lo que esto se traduce en un cambio de pliegue real de 1,5, que es bastante razonable.\n\nPodemos subdividir fácilmente la tabla de resultados para incluir sólo aquellos que sean significativos utilizando la función filter(), pero primero convertiremos la tabla de resultados en un tibble (matriz de elementos, como una especie de data.frame mejorado para el tratamiento de datos):\n\nres_table_tb &lt;- res_table %&gt;%\n  data.frame() %&gt;%\n  rownames_to_column(var=\"gene\") %&gt;% \n  as_tibble()\n\nhead(res_table_tb)\n\n# A tibble: 6 × 6\n  gene            baseMean log2FoldChange lfcSE       pvalue        padj\n  &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1 ENSG00000000003   4040.           1.13  0.229 0.0000000192 0.000000590\n2 ENSG00000000419   3955.          -0.255 0.222 0.154        0.342      \n3 ENSG00000000457   2264.           0.735 0.205 0.0000387    0.000448   \n4 ENSG00000000460    566.           0.337 0.245 0.0778       0.212      \n5 ENSG00000000938     31.3         -0.376 0.601 0.156        0.345      \n6 ENSG00000000971   3784.           0.157 0.334 0.470        0.705      \n\n\nAhora podemos hacer un subconjunto de esa tabla para conservar sólo los genes significativos utilizando nuestros umbrales predefinidos:\n\nsig &lt;- res_table_tb %&gt;%\n        dplyr::filter(padj &lt; padj.cutoff & abs(log2FoldChange) &gt; lfc.cutoff)\n\nhead(sig)\n\n# A tibble: 6 × 6\n  gene            baseMean log2FoldChange lfcSE        pvalue        padj\n  &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;\n1 ENSG00000000003    4040.          1.13  0.229 0.0000000192  0.000000590\n2 ENSG00000000457    2264.          0.735 0.205 0.0000387     0.000448   \n3 ENSG00000001036    1678.          0.620 0.236 0.00141       0.00922    \n4 ENSG00000001497    2324.         -0.734 0.332 0.00262       0.0153     \n5 ENSG00000001561    3888.          1.71  0.330 0.00000000463 0.000000169\n6 ENSG00000001626    4004.          1.68  0.942 0.00119       0.00803    \n\n\n¿Cuantos genes hay diferencialmente expresados en las células luminales de próstata con respecto a las basales?\n\nsig\n\n# A tibble: 3,188 × 6\n   gene            baseMean log2FoldChange lfcSE        pvalue        padj\n   &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;\n 1 ENSG00000000003   4040.           1.13  0.229 0.0000000192  0.000000590\n 2 ENSG00000000457   2264.           0.735 0.205 0.0000387     0.000448   \n 3 ENSG00000001036   1678.           0.620 0.236 0.00141       0.00922    \n 4 ENSG00000001497   2324.          -0.734 0.332 0.00262       0.0153     \n 5 ENSG00000001561   3888.           1.71  0.330 0.00000000463 0.000000169\n 6 ENSG00000001626   4004.           1.68  0.942 0.00119       0.00803    \n 7 ENSG00000002726     57.7          2.11  0.717 0.0000513     0.000567   \n 8 ENSG00000003147   3870.           1.28  0.352 0.00000482    0.0000755  \n 9 ENSG00000003249    419.           1.05  0.466 0.000853      0.00613    \n10 ENSG00000003400   2427.           1.89  0.353 0.00000000260 0.000000102\n# ℹ 3,178 more rows\n\n\n\nIncorporación del GeneSymbol\nPor último, es recomendable asignarle a cada gen su GeneSymbol, ya que es el nombre de los genes que conocemos todos. Además para las representaciones va a ser más bonito de ver con el nombre del gen que con el código de Ensembl. Para crear este listado vamos a utilizar el paquete biomaRt.\n\n#para este apartado hemos intalado biomaRt\nensembl = useEnsembl(biomart=\"ensembl\", dataset=\"hsapiens_gene_ensembl\")\n\nComo no hemos escrito versión, accederá a la última versión que tenga registrada. Si quisieramos conectar con alguna versión antigua o de otro animal tenemos que escribir la versión:\n\nensembl = useEnsembl(biomart=\"ensembl\", dataset=\"hsapiens_gene_ensembl\", version=78)\n\nPara saber qué especies contiene el dataset tenemos que cargar el paquete ensemble completo y usar el comando listDatasets(ensembl):\n\nensembl = useEnsembl(biomart=\"ensembl\")\nhead(listDatasets(ensembl))\n\n                       dataset                           description\n1 abrachyrhynchus_gene_ensembl Pink-footed goose genes (ASM259213v1)\n2     acalliptera_gene_ensembl      Eastern happy genes (fAstCal1.2)\n3   acarolinensis_gene_ensembl       Green anole genes (AnoCar2.0v2)\n4    acchrysaetos_gene_ensembl       Golden eagle genes (bAquChr1.2)\n5    acitrinellus_gene_ensembl        Midas cichlid genes (Midas_v5)\n6    amelanoleuca_gene_ensembl       Giant panda genes (ASM200744v2)\n      version\n1 ASM259213v1\n2  fAstCal1.2\n3 AnoCar2.0v2\n4  bAquChr1.2\n5    Midas_v5\n6 ASM200744v2\n\n\nY ya seleccionariamos la versión que quisieramos.\nContinuando con la creación del listado de códigos de equivalencias de Códigos de Ensembl con GeneSymbol, el siguiente paso consistiría en crear el listado\n\n#Definimos el DataSet que vamos a utilizar\nensembl = useEnsembl(biomart=\"ensembl\", dataset=\"hsapiens_gene_ensembl\")\n#Creamos un listado con getBM\nGeneSymbolList &lt;-getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)\n#Visualizamos el listado\nhead(GeneSymbolList)\n\n  ensembl_gene_id hgnc_symbol\n1 ENSG00000210049       MT-TF\n2 ENSG00000211459     MT-RNR1\n3 ENSG00000210077       MT-TV\n4 ENSG00000210082     MT-RNR2\n5 ENSG00000209082      MT-TL1\n6 ENSG00000198888      MT-ND1\n\n\nAhora podemos incorporar esta info al Dataset donde tenemos los datos de Fold change con los que haremos las gráficas de representación de datos\n\nsig_Gene_Symbol&lt;-merge (sig, GeneSymbolList, by.x=\"gene\", by.y=\"ensembl_gene_id\", all.x=TRUE)\n#Ahora renombramos la columna que acabamos de añadir\ncolnames(sig_Gene_Symbol)[7]&lt;-c(\"Gene_Symbol\")\n#Visualizamos el listado\nhead(sig_Gene_Symbol)\n\n             gene baseMean log2FoldChange     lfcSE       pvalue         padj\n1 ENSG00000000003 4040.437      1.1276341 0.2288288 1.923117e-08 5.899186e-07\n2 ENSG00000000457 2263.842      0.7348141 0.2054399 3.872069e-05 4.482583e-04\n3 ENSG00000001036 1677.821      0.6195882 0.2363429 1.409314e-03 9.224009e-03\n4 ENSG00000001497 2323.912     -0.7344059 0.3315479 2.619123e-03 1.532309e-02\n5 ENSG00000001561 3887.750      1.7062280 0.3304577 4.630871e-09 1.694177e-07\n6 ENSG00000001626 4004.007      1.6784524 0.9423249 1.189341e-03 8.031261e-03\n  Gene_Symbol\n1      TSPAN6\n2       SCYL3\n3       FUCA2\n4       LAS1L\n5       ENPP4\n6        CFTR\n\n\n\n\n\n3.4.2.6 Representación de los genes más expresados o de una maquinaria en concreto\nEsto suele requerir primero un poco de manipulación de los datos.\nVamos a trazar los valores de recuento normalizados para (por ejemplo) los 20 genes más expresados diferencialmente (por valores padj).\nPara ello, primero tenemos que determinar los nombres de los 20 genes principales ordenando nuestros resultados y extrayendo los 20 genes principales (por valores padj):\n\ntop20_sig_genes &lt;-  sig_Gene_Symbol %&gt;% \n        arrange(padj) %&gt;%   #Arrange rows by padj values\n        pull(gene) %&gt;%      #Extract character vector of ordered genes\n        head(n=20)      #Extract the first 20 genes\n\nhead(top20_sig_genes)\n\n[1] \"ENSG00000236699\" \"ENSG00000116299\" \"ENSG00000170961\" \"ENSG00000148677\"\n[5] \"ENSG00000156966\" \"ENSG00000171812\"\n\n\n\nSi queremos hacer la exploración de una maquinaria en concreto tenemos que crear un .csv que contenga el listado de los nombres de los genes que queremos extraer para cargarlos en esta variable que acabamos de crear.\n\nAhora extraemos los valores counts normalizadas de estos genes seleccionados:\n\ntop20_sig_norm &lt;- as.data.frame(normalized_counts) %&gt;%\n  rownames_to_column(var = \"gene\") %&gt;%\n  dplyr::filter(gene %in% top20_sig_genes)\n\nhead(top20_sig_norm)\n\n             gene    Basal_1    Basal_2    Basal_3  Luminal_1  Luminal_2\n1 ENSG00000004468   86.85545   47.82078   59.56635  836.43688  738.94772\n2 ENSG00000101335 2401.50847 2922.04865 2619.89247  301.07740  333.37584\n3 ENSG00000116299 1050.32417  832.87851  899.65731 6605.75777 7693.12526\n4 ENSG00000140945 3908.49533 2657.04185 3016.31681   51.84114   78.56628\n5 ENSG00000143416  694.84361  615.69249  600.79855 3716.61107 2966.40795\n6 ENSG00000148677  131.62630  190.28684  131.45678 1638.97763 1794.28398\n  Luminal_3\n1 1062.3894\n2  428.5948\n3 7779.3994\n4  138.4846\n5 2878.8630\n6 2040.8793\n\n\nAhora tenemos que poner los valores en disposición x e y interpretable por ggplot:\n\ngathered_top20_sig &lt;- top20_sig_norm %&gt;%\n  gather(colnames(top20_sig_norm)[2:ncol(top20_sig_norm)], key = \"samplename\", value = \"normalized_counts\")\n#como estos son los datos que vamos a representar, añadimos los genenames oficiales\ngathered_top20_sig &lt;- merge(gathered_top20_sig, GeneSymbolList, by.x=\"gene\", by.y=\"ensembl_gene_id\", all.x=TRUE)\n#Ahora renombramos la columna que acabamos de añadir\ncolnames(gathered_top20_sig)[ncol(gathered_top20_sig)]&lt;-c(\"Gene_Symbol\")\n\nhead(gathered_top20_sig)\n\n             gene samplename normalized_counts Gene_Symbol\n1 ENSG00000004468    Basal_1          86.85545        CD38\n2 ENSG00000004468    Basal_3          59.56635        CD38\n3 ENSG00000004468  Luminal_2         738.94772        CD38\n4 ENSG00000004468    Basal_2          47.82078        CD38\n5 ENSG00000004468  Luminal_1         836.43688        CD38\n6 ENSG00000004468  Luminal_3        1062.38940        CD38\n\n\nAhora, si queremos nuestros “counts” coloreados por grupo de muestra, entonces necesitamos combinar la información de metadatos con los datos de recuentos normalizados fundidos en el mismo marco de datos para introducirlos en ggplot():\n\ngathered_top20_sig &lt;- inner_join(metaData %&gt;%\n  rownames_to_column(var = \"samplename\"), gathered_top20_sig)\n\nJoining with `by = join_by(samplename)`\n\n# inner_join() fusionará 2 marcos de datos con respecto a la columna \"samplename\" \n#(por eso convertimos los roenames en una columna), es decir, una columna con \n#el mismo nombre de columna en ambos marcos de datos.\n\nhead(gathered_top20_sig)\n\n  samplename cell_type            gene normalized_counts Gene_Symbol\n1    Basal_1     Basal ENSG00000004468          86.85545        CD38\n2    Basal_1     Basal ENSG00000101335        2401.50847        MYL9\n3    Basal_1     Basal ENSG00000116299        1050.32417     ELAPOR1\n4    Basal_1     Basal ENSG00000140945        3908.49533       CDH13\n5    Basal_1     Basal ENSG00000143416         694.84361    SELENBP1\n6    Basal_1     Basal ENSG00000148677         131.62630      ANKRD1\n\n\nY ahora realizamos un gráfico de la expresión de los genes\n\nggplot(gathered_top20_sig) +\n        geom_boxplot(aes(x = Gene_Symbol, y = normalized_counts, fill = cell_type)) +\n        scale_y_log10() +\n        xlab(\"Genes\") +\n        ylab(\"log10 Normalized Counts\") +\n        ggtitle(\"Top 20 Significant DE Genes\") +\n  theme_bw() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6)) +\n    theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\nComo se puede ver, esta gráfica es un jaleo porque contiene mucha info muy junta por lo que puede venir bien separar cada gen en una gráfica independiente:\n\nggplot(gathered_top20_sig) +\n        geom_boxplot(aes(x = Gene_Symbol, y = normalized_counts, fill = cell_type)) +\n        scale_y_log10() +\n        xlab(\"Genes\") +\n        ylab(\"log10 Normalized Counts\") +\n        ggtitle(\"Top 20 Significant DE Genes\") +\n  facet_wrap(~gene, scale=\"free\")+ \n  theme(axis.text.x = element_text( size = 7),\n        axis.text.y = element_text( size = 5),\n    strip.text.x = element_text(size = 4, face = \"bold\"), \n    legend.key.size=unit(2, \"mm\"))\n\n\n\n\n\n\n3.4.2.7 Heatmap\nTambién vamos a hacer un heatmap, en este caso de todos los genes desregulados de forma significativa. Para ello volveremos a unsar el paquete pheatmap. Primero tenemos que extraer todos los genes que estén significativamente desregulados:\n\nnorm_sig &lt;- as.data.frame(normalized_counts) %&gt;% \n  rownames_to_column(var = \"gene\") %&gt;%\n              dplyr::filter(gene %in% sig$gene) %&gt;% \n          data.frame() %&gt;%\n  column_to_rownames(var=\"gene\")\n  \n\n\nhead(norm_sig)\n\n                 Basal_1   Basal_2   Basal_3 Luminal_1 Luminal_2 Luminal_3\nENSG00000000003 2743.558 2586.3070 1909.2043  5468.243  6195.057  5340.250\nENSG00000000457 1798.893 1606.9773 1458.3486  3374.659  2550.219  2793.953\nENSG00000001036 1204.336 1148.6949 1379.2691  2542.210  1661.571  2130.844\nENSG00000001497 4052.657 2257.5391 2979.3446  1766.587  1105.236  1782.105\nENSG00000001561 1782.775 2048.3232 1300.1897  6561.892  7375.675  4257.644\nENSG00000001626 2484.782  410.4617  429.2885 13469.724  2706.290  4523.494\n\n\nA continuación vamos a crear la anotation para las muestras a partir de la metadata:\n\nannotation &lt;- metaData %&gt;% \n  rownames_to_column(var=\"samplename\") %&gt;%\n    dplyr::select(samplename, cell_type) %&gt;% \n    data.frame(row.names = \"samplename\")\n\nhead(annotation)\n\n          cell_type\nBasal_1       Basal\nBasal_2       Basal\nBasal_3       Basal\nLuminal_1   Luminal\nLuminal_2   Luminal\nLuminal_3   Luminal\n\n\nA continuación hacemos el Heatmap:\n\npheatmap(norm_sig, \n         color = colorRampPalette(brewer.pal(6, \"YlOrRd\"))(100), \n         cluster_rows = T, \n         show_rownames = F,\n         show_colnames = F,\n         annotation = annotation, \n         border_color = NA, \n         fontsize = 10, \n         scale = \"row\", \n         fontsize_row = 10, \n         height = 20)\n\n\n\n\nSi tuvieramos menos genes y quisieramos visualizar el heatmap con los nombres de estos genes podríamos ponerles un label:\n\n#primero vamos a filtrar solamente los 20 más diferencialemnte expresados:\nnorm_sig_genes &lt;- as.data.frame(normalized_counts) %&gt;% \n  rownames_to_column(var = \"gene\") %&gt;%\n              dplyr::filter(gene %in% top20_sig_norm$gene) %&gt;% \n          data.frame() %&gt;%\n  column_to_rownames(var=\"gene\")\n#Creamos la anotación para los genes (para las muestras vamos a utilizar la que hemos creado antes en la variable \"annotation\")\nrow_annotation&lt;-norm_sig_genes%&gt;%\n  rownames_to_column(var=\"gene\")%&gt;%\n        inner_join(GeneSymbolList, by=c(\"gene\"=\"ensembl_gene_id\")) %&gt;%\n  dplyr::rename(\"Gene_Symbol\"=\"hgnc_symbol\") %&gt;%\n  #aquí he tenido que definir la función rename con \"dplyr::\" como prefijo. Esto es porque hay otros paquetes que utilizan esta función y crea conflicto. Al utilizar este prefijo hacemos que solo busque la función en ese paquete\n  mutate(Gene_Symbol = ifelse(is.na(Gene_Symbol) | Gene_Symbol == \"\", gene, Gene_Symbol))%&gt;%\n  dplyr::select(gene,Gene_Symbol)%&gt;%\n column_to_rownames(var=\"gene\")\n\nrow_annotation&lt;-as.data.frame(row_annotation)\n#Ahora se hace el gráfico\npheatmap(norm_sig_genes, \n         color = colorRampPalette(brewer.pal(6, \"YlOrRd\"))(100), \n         cluster_rows = T, \n         show_rownames = T,\n         labels_row = row_annotation[,1],\n         show_colnames = F,\n         annotation = annotation, \n         border_color = NA, \n         fontsize = 10, \n         scale = \"row\", \n         fontsize_row = 10, \n         height = 20)\n\n\n\n\n\n\n3.4.2.8 PCA\nEn este caso, para realizar el PCA vamos a utilizar una herramienta llamada PCAtools. Hay numerosas gráficas que podemos hacer con esta herramienta. De hecho a más variables tengamos, mayor cantidad de herramientas tendremos (enlace a la página oficial). Primero creamos la variable p con la función pca para juntar la metadata con la matriz de datos, eliminando aqullos genes que presenten una varianza inferior al 10%:\n\np&lt;-pca(normalized_counts, metadata = metaData, removeVar=0.1)\n\n-- removing the lower 10% of variables based on variance\n\n\nA continuación podemos explorar diferentes gráficos. Por ejemplo, podemos empezar con un “biplot” sencillo:\n\nPCAtools::biplot(p,\n                 title = \"PCA Results\",\n                 lab=NULL,\n                 axisLabSize = 8,\n                 colby=\"cell_type\")\n\n\n\n\nY vamos a añadir distintas varibales para tenerlas en cuenta:\n\nPCAtools::biplot(p,\n                 title = \"PCA Results\",\n                 lab=NULL,\n                 axisLabSize = 8,\n                 colby=\"cell_type\",\n                 colkey = c(\"Basal\"=\"forestgreen\", \"Luminal\"=\"lightblue\"),\n                 encircle = TRUE,\n                 encircleFill = TRUE,\n                 legendPosition = \"right\")\n\n\n\n\nY la que tanto nos gusta del metaboanalyst:\n\nPCAtools::biplot(p,\n                 title = \"PCA Results\",\n                 lab=NULL,\n                 axisLabSize = 8,\n                 colby=\"cell_type\",\n                 colkey = c(\"Basal\"=\"forestgreen\", \"Luminal\"=\"blue\"),\n                 ellipse = TRUE,# hacemos la elipse\n                 ellipseType = \"t\",\n                 ellipseLevel = 0.95,\n                 ellipseFill = TRUE,\n                 ellipseAlpha= 1/3,\n                 ellipseLineSize = 0,\n                 ellipseFillKey = c(\"Basal\"=\"lightgreen\", \"Luminal\"=\"lightblue\"),\n                 legendPosition = \"right\")\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nToo few points to calculate an ellipse\nToo few points to calculate an ellipse\n\n\n\n\n#En este caso sale que hay pocos puntos para generar un buen intervalo de confianza\n\nTambién podemos hacer la representación de varias gráficas PCA de forma simultánea para así poder ver más de una opción:\n\npairsplot(p,\n    components = getComponents(p, c(1:4)),\n    triangle = TRUE, \n    trianglelabSize = 16,\n    hline = 0, \n    vline = 0,\n    pointSize = 2,\n    gridlines.major = FALSE, \n    gridlines.minor = FALSE,\n    colby = 'cell_type',\n    title = 'Pairs plot',\n    titleLabSize = 12,\n    plotaxes = FALSE,\n    margingaps = unit(c(-0.01, -0.01, -0.01, -0.01), 'cm'))\n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\n\n\n\n\nPara ver correlaciones entre variables es recomendable explorar el paquete\n\n\n3.4.2.9 Volcano plot\nPara generar un volcano plot, primero necesitamos tener una columna en nuestros datos de resultados que indique si el gen se considera o no diferencialmente expresado en función de los p valores ajustados:\n\nres_table_tb &lt;- res_table_tb %&gt;% \n                  mutate(threshold = padj &lt; 0.05 & abs(log2FoldChange) &gt;= 0.58)\n\n\n\nhead(res_table_tb)\n\n# A tibble: 6 × 7\n  gene            baseMean log2FoldChange lfcSE       pvalue      padj threshold\n  &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;lgl&gt;    \n1 ENSG00000000003   4040.           1.13  0.229 0.0000000192   5.90e-7 TRUE     \n2 ENSG00000000419   3955.          -0.255 0.222 0.154          3.42e-1 FALSE    \n3 ENSG00000000457   2264.           0.735 0.205 0.0000387      4.48e-4 TRUE     \n4 ENSG00000000460    566.           0.337 0.245 0.0778         2.12e-1 FALSE    \n5 ENSG00000000938     31.3         -0.376 0.601 0.156          3.45e-1 FALSE    \n6 ENSG00000000971   3784.           0.157 0.334 0.470          7.05e-1 FALSE    \n\n\nUna vez generada esta matriz ya podemos pasar a la representación de los datos:\n\nggplot(res_table_tb) +\n        geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +\n        ggtitle(\"Luminal vs Basal\") +\n        xlab(\"log2 fold change\") + \n        ylab(\"-log10 adjusted p-value\") +\n        #scale_y_continuous(limits = c(0,50)) +\n        theme(legend.position = \"none\",\n              plot.title = element_text(size = rel(1.5), hjust = 0.5),\n              axis.title = element_text(size = rel(1.25)))  \n\n\n\n\nPodemos poner etiquetas a los nombres de los genes con el argumento geom_text_repel (hay que instalarlo), pero para ello tenemos que crear una columna en la que indiquemos que genes vamos a hacer que se etiqueten:\n\nres_table_tb &lt;- res_table_tb %&gt;% arrange(padj) %&gt;% mutate(genelabels = \"\")\n\nres_table_tb$genelabels[1:10] &lt;- res_table_tb$gene[1:10]\n\nhead(res_table_tb)\n\n# A tibble: 6 × 8\n  gene      baseMean log2FoldChange lfcSE   pvalue     padj threshold genelabels\n  &lt;chr&gt;        &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;lgl&gt;     &lt;chr&gt;     \n1 ENSG0000…    2461.           3.12 0.184 1.01e-65 1.70e-61 TRUE      ENSG00000…\n2 ENSG0000…    4144.           2.95 0.185 2.26e-58 1.91e-54 TRUE      ENSG00000…\n3 ENSG0000…   14383.          -3.12 0.220 8.19e-47 4.61e-43 TRUE      ENSG00000…\n4 ENSG0000…     988.           3.52 0.249 1.19e-46 5.04e-43 TRUE      ENSG00000…\n5 ENSG0000…    2816.           2.34 0.167 2.46e-45 8.31e-42 TRUE      ENSG00000…\n6 ENSG0000…    1953.          -2.78 0.211 1.55e-40 4.35e-37 TRUE      ENSG00000…\n\n\nAhora podemos poner este argumento adicional a ggplot:\n\n#para este apartado hay que tener cargado el paquete ggrepel\nggplot(res_table_tb, aes(x = log2FoldChange, y = -log10(padj))) +\n        geom_point(aes(colour = threshold)) +\n        geom_text_repel(aes(label = genelabels)) +\n        ggtitle(\"Luminal vs Basal\") +\n        xlab(\"log2 fold change\") + \n        ylab(\"-log10 adjusted p-value\") +\n        theme(legend.position = \"none\",\n              plot.title = element_text(size = rel(1.5), hjust = 0.5),\n              axis.title = element_text(size = rel(1.25)))  \n\n\n\n\n\n\n3.4.2.10 Explorar un Único gen de interés\nPara esto, está la función integrada en DESeq2 de plotCount(), que lo podemos combinar con ggplot:\n\nd &lt;- plotCounts(dds, gene=\"ENSG00000236699\", intgroup=\"cell_type\", returnData=TRUE)\n\n# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)\nggplot(d, aes(x = cell_type, y = count, color = cell_type)) + \n  geom_point(position=position_jitter(w = 0.1,h = 0)) +\n  theme_bw() +\n  ggtitle(\"ENSG00000236699\") +\n  theme(plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "RNAseq.html#formato-de-datos",
    "href": "RNAseq.html#formato-de-datos",
    "title": "Bulk RNAseq",
    "section": "4.1 Formato de datos",
    "text": "4.1 Formato de datos\nPara realizar los análsis de enriquecimiento tenemos que tener una lista de genes “rankeada” que contenga el Fold Change de cada gen, teniendo cada gen un ID único. Este listado de genes debe de cumplir las siguientes condiciones:\n\nVector numérico: cambio de pliegue u otro tipo de variable numérica\nVector con nombre: cada número tiene un nombre, el ID del gen correspondiente\nVector numérico ordenado: los números deben ordenarse de forma decreciente.\n\nSi importamos los datos desde un archivo .csv, el archivo debería contener dos columnas, una para el ID del gen (no se permiten ID duplicados) y otra para el Fold Change. Podemos preparar nuestra propia geneList mediante el siguiente comando:\n\nd = read.csv(your_csv_file)\n## Asumimos que la primera columna es el ID\n## La segunda columna es el Fold Change\n\n## Caracaterística 1: numeric vector\ngeneList = d[,2]\n\n## Caracaterística 2: named vector\nnames(geneList) = as.character(d[,1])\n\n## Caracaterística 3: decreasing orde\ngeneList = sort(geneList, decreasing = TRUE)\n\nEn nuestro caso, como procedemos del análisis anterior vamos a ver la preparación de la GeneList para que tenga estas características:\n\ngeneList&lt;-round(res_table_tb$log2FoldChange, digits = 5)\nnames(geneList)&lt;-res_table_tb$gene\ngeneList&lt;- sort(geneList,decreasing = T)\n\nhead(geneList)\n\nENSG00000274542 ENSG00000162040 ENSG00000211689 ENSG00000109182 ENSG00000188257 \n        7.67977         5.31934         4.65300         4.54901         4.32895 \nENSG00000219814 \n        4.23851 \n\n\nTambien, por agilizar el tratameinto de datos, es recomendable pasar los códigos de “Ensembl” a códdigos de “EntrezGeneID” porque es el código que usan por defecto todos los paquetes y funciones que vamos a utilizar a continuación. Esto lo vamos a hacer con el paquete org.Hs.eg.db (que nos aporta el nombre de todos los genes de humano en todos los formatos) gracias a la función bitr del propio paquete de clusterProfiler:\n\n#Primero hacemos la conversión\nGeneNames&lt;-names(geneList)\nGeneNames_drop &lt;- bitr(GeneNames, fromType = \"ENSEMBL\", toType = \"ENTREZID\", OrgDb=\"org.Hs.eg.db\", drop=TRUE)\n\n'select()' returned 1:many mapping between keys and columns\n\n\nWarning in bitr(GeneNames, fromType = \"ENSEMBL\", toType = \"ENTREZID\", OrgDb =\n\"org.Hs.eg.db\", : 6.67% of input gene IDs are fail to map...\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAl hacer la conversión entramos en el jodido mundo de las anotaciones de genes. Hemos podido ver que nos sale un mensaje de que se han mapeado un % de las anotaciones de ENSEMBL que ah fallado al mapear con a ENTREZ y se han rellenado con NAs (realmente se han eliminado las filas que contengan estos NA porque hemos puesto drop=TRUE). También, si nos damos cuenta, en la conversión anterior se crean duplicados de los “ENTEZ_ID” para la misma anotación de ENSEMBL (esto es normal porque el ENSEMBL es una anotación del genoma y el el ENTREZID es una antotación de genes propiamente dichos de manera que que hay regiones del genoma anotadas a las que todavía no se han dado un código ENTREZ; de igual manera puede haber un ENTREZID que tenga mas de una anotación de ENSMBL, pero esto no es un problema por el tratamiento de datos que vamos a hacer).\n\n\nEl siguiente código extrae los códigos ENSEMBL y los FC de nuestro dataframe geneList, y lo vamos a ir viendo paso a paso (realmente esto es para ver lo que va haciendo el código, lo que hay que escribir es directamente el último código completo y lo hace todo del tirón). Primero definimos geneList como el dataframe que vamos a modificar:\n\ngeneList_treat&lt;-geneList\nhead(geneList_treat)\n\nENSG00000274542 ENSG00000162040 ENSG00000211689 ENSG00000109182 ENSG00000188257 \n        7.67977         5.31934         4.65300         4.54901         4.32895 \nENSG00000219814 \n        4.23851 \n\n\n%&gt;% lo convertimos en un tibble estableciendo como nombre de filas el la columna del “ENSEMBL_ID”:\n\ngeneList_treat&lt;-geneList %&gt;% \n  as_tibble(rownames=\"ENSEMBL\")\nhead(geneList_treat)\n\n# A tibble: 6 × 2\n  ENSEMBL         value\n  &lt;chr&gt;           &lt;dbl&gt;\n1 ENSG00000274542  7.68\n2 ENSG00000162040  5.32\n3 ENSG00000211689  4.65\n4 ENSG00000109182  4.55\n5 ENSG00000188257  4.33\n6 ENSG00000219814  4.24\n\n\n%&gt;% le unimos (como una especie de merge) la columna de “ENTREZ_ID” que se encuentra en el dataset de las conversiones GeneNames_drop en función de la columna “ENSEMBL”,\n\ngeneList_treat&lt;-geneList %&gt;% \n  as_tibble(rownames=\"ENSEMBL\") %&gt;% \n  left_join(GeneNames_drop, by=\"ENSEMBL\")\nhead(geneList_treat)\n\n# A tibble: 6 × 3\n  ENSEMBL         value ENTREZID\n  &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;   \n1 ENSG00000274542  7.68 1139    \n2 ENSG00000162040  5.32 64711   \n3 ENSG00000211689  4.65 6966    \n4 ENSG00000211689  4.65 445347  \n5 ENSG00000109182  4.55 80157   \n6 ENSG00000188257  4.33 5320    \n\n\n%&gt;% a continuación se queda solo con aquellas filas que no tienen NA en la columna de “ENTREZ_ID”,\n\ngeneList_treat&lt;-geneList %&gt;% \n  as_tibble(rownames=\"ENSEMBL\") %&gt;% \n  left_join(GeneNames_drop, by=\"ENSEMBL\") %&gt;% \n  dplyr::filter(!is.na(ENTREZID))\nhead(geneList_treat)\n\n# A tibble: 6 × 3\n  ENSEMBL         value ENTREZID\n  &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;   \n1 ENSG00000274542  7.68 1139    \n2 ENSG00000162040  5.32 64711   \n3 ENSG00000211689  4.65 6966    \n4 ENSG00000211689  4.65 445347  \n5 ENSG00000109182  4.55 80157   \n6 ENSG00000188257  4.33 5320    \n\n\n%&gt;% agrupamos los valores de todss las filas que tengan el mismo “ENTREZ_ID” (genera como una especie de almacenamiento de datos por capas de manera que tenemos también una tercera dimensión de almacenamiento de datos como en el lenguaje SQL),\n\ngeneList_treat&lt;-geneList %&gt;% \n  as_tibble(rownames=\"ENSEMBL\") %&gt;% \n  left_join(GeneNames_drop, by=\"ENSEMBL\") %&gt;% \n  dplyr::filter(!is.na(ENTREZID)) %&gt;% \n  group_by(ENTREZID)\nhead(geneList_treat)\n\n# A tibble: 6 × 3\n# Groups:   ENTREZID [6]\n  ENSEMBL         value ENTREZID\n  &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;   \n1 ENSG00000274542  7.68 1139    \n2 ENSG00000162040  5.32 64711   \n3 ENSG00000211689  4.65 6966    \n4 ENSG00000211689  4.65 445347  \n5 ENSG00000109182  4.55 80157   \n6 ENSG00000188257  4.33 5320    \n\n\n%&gt;% a continuación redefinimos la columna value (que contiene los FC) como la media de los FC que correspondan al mismo ENTREZID (en este paso no definimos qué hacer con la columna de los ENSEMBL_ID de manera que se eliminan y nos quedamos con dos columnas: una primera columna de “ENTREZ_ID” y una segunda con los valores de los FC):\n\ngeneList_treat&lt;-geneList %&gt;% \n  as_tibble(rownames=\"ENSEMBL\") %&gt;% \n  left_join(GeneNames_drop, by=\"ENSEMBL\") %&gt;% \n  dplyr::filter(!is.na(ENTREZID)) %&gt;% \n  group_by(ENTREZID) %&gt;% \n  reframe(log2FC=mean(value))\nhead(geneList_treat)\n\n# A tibble: 6 × 2\n  ENTREZID   log2FC\n  &lt;chr&gt;       &lt;dbl&gt;\n1 1         -0.143 \n2 1000      -1.12  \n3 10000      0.101 \n4 10001     -0.0244\n5 10002      0.0923\n6 100037417  0.301 \n\n\n%&gt;% y por úlimo ordenamos de forma desdendente porque es el imput que necesitamos. NOTA: este es el único código final que hay que poner para que haga todo lo anterior:\n\ngeneList_treat&lt;-geneList %&gt;% \n  as_tibble(rownames=\"ENSEMBL\") %&gt;% \n  left_join(GeneNames_drop, by=\"ENSEMBL\") %&gt;% \n  dplyr::filter(!is.na(ENTREZID)) %&gt;% \n  group_by(ENTREZID) %&gt;% \n  reframe(log2FC=mean(value)) %&gt;% \n  arrange(desc(log2FC))\nhead(geneList_treat)\n\n# A tibble: 6 × 2\n  ENTREZID log2FC\n  &lt;chr&gt;     &lt;dbl&gt;\n1 445347     4.65\n2 6966       4.65\n3 80157      4.55\n4 5320       4.33\n5 729277     4.24\n6 131034     4.23\n\n\nPero todavía no tenemos un listado compatible con los análisis que vamos a hacer de manera que tenemos que hacer que este último resultado esté en formato de vector:\n\nENTREZ_geneList&lt;-setNames(geneList_treat$log2FC,geneList_treat$ENTREZID)\nhead(ENTREZ_geneList)\n\n 445347    6966   80157    5320  729277  131034 \n4.65300 4.65300 4.54901 4.32895 4.23851 4.23195 \n\n\nCon esto tendremos un listado de todos los genes en EntrezID con su correspondiente valor de Fold Change."
  },
  {
    "objectID": "RNAseq.html#gene-ontology-go-analysis",
    "href": "RNAseq.html#gene-ontology-go-analysis",
    "title": "Bulk RNAseq",
    "section": "4.2 Gene Ontology (GO) Analysis",
    "text": "4.2 Gene Ontology (GO) Analysis\n\n4.2.1 Sobreexpresión de GO\nPara comenzar vamos a comenzar haciendo un análisis de enriquecimiento en GO. Tras tener nuestro listado preparado debemos filtrar aquellos genes que tengan un Fold Change elevado (cada uno puede establecer el Fold Change mínimo que quiera, en nuestro caso vamos a utilizar un valor de 2 para buscar cambios fuertes):\n\ngene&lt;-names(ENTREZ_geneList)[abs(ENTREZ_geneList) &gt; 2]\nhead(gene)\n\n[1] \"445347\" \"6966\"   \"80157\"  \"5320\"   \"729277\" \"131034\"\n\n\nY ahora hacemos el análisis GO propiamente dicho (en este ejemplo vamos a haer el análsisi por “biological Process”).\nPrimero podemos generar una tabla que representa todos lo procesos en los que se ven implicados nuestro listado de genes (que no sería el análisis de enriquecimiento propiamente dicho):\n\nego &lt;- enrichGO(gene     = gene,\n                universe = names(ENTREZ_geneList),\n                #Con el argumento \"universe definimos el background. Si no lo defininmos usará el de la base que estamos introduciendo (los mismos que está muy deregulados), de manera que lo más correcto es poner toda la cadena de genes previa al filtro\n                OrgDb         = org.Hs.eg.db,\n                ont           = \"BP\", #One of \"BP\", \"MF\", and \"CC\" subontologies, or \"ALL\" for all three.\n                pAdjustMethod = \"BH\", #one of \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"BY\", \"fdr\", \"none\"\n                pvalueCutoff  = 0.01,\n                qvalueCutoff  = 0.05)\n\nhead(ego)\n\n                   ID                                   Description GeneRatio\nGO:0030198 GO:0030198             extracellular matrix organization    42/503\nGO:0045229 GO:0045229 external encapsulating structure organization    42/503\nGO:0043062 GO:0043062          extracellular structure organization    42/503\nGO:0001525 GO:0001525                                  angiogenesis    43/503\nGO:0099177 GO:0099177        regulation of trans-synaptic signaling    37/503\nGO:0030282 GO:0030282                           bone mineralization    18/503\n             BgRatio       pvalue     p.adjust       qvalue\nGO:0030198 256/13334 5.146233e-16 7.972669e-13 6.676722e-13\nGO:0045229 256/13334 5.146233e-16 7.972669e-13 6.676722e-13\nGO:0043062 257/13334 5.940886e-16 7.972669e-13 6.676722e-13\nGO:0001525 429/13334 4.610318e-09 4.640285e-06 3.886012e-06\nGO:0099177 357/13334 2.392500e-08 1.926441e-05 1.613300e-05\nGO:0030282 100/13334 3.078649e-08 2.065774e-05 1.729985e-05\n                                                                                                                                                                                                                                       geneID\nGO:0030198         1803/9622/183/1297/27035/55512/55790/3549/92949/3936/9806/4316/7837/3908/5268/4312/9510/4313/4321/1294/1282/7092/1284/1296/7373/1287/857/6624/11095/11096/144165/3037/4319/50509/165/1288/10631/4318/91522/10630/4314/1308\nGO:0045229         1803/9622/183/1297/27035/55512/55790/3549/92949/3936/9806/4316/7837/3908/5268/4312/9510/4313/4321/1294/1282/7092/1284/1296/7373/1287/857/6624/11095/11096/144165/3037/4319/50509/165/1288/10631/4318/91522/10630/4314/1308\nGO:0043062         1803/9622/183/1297/27035/55512/55790/3549/92949/3936/9806/4316/7837/3908/5268/4312/9510/4313/4321/1294/1282/7092/1284/1296/7373/1287/857/6624/11095/11096/144165/3037/4319/50509/165/1288/10631/4318/91522/10630/4314/1308\nGO:0001525 1139/354/183/54567/27035/10267/3549/6376/1950/290/7837/1636/154796/144455/54922/2316/154810/2246/2069/3592/9510/4313/140862/57007/6422/5054/1282/4897/3552/1893/1284/1296/857/6678/7058/83700/4804/1464/7476/3553/8091/1012/147372\nGO:0099177                                1128/1139/594855/952/4852/183/22999/8564/9066/5764/388336/6376/79772/55607/2852/10718/2904/1636/2914/3908/2534/1268/5924/22854/140730/2171/3814/440279/1009/6507/6622/9148/9162/4804/7476/3553/2903\nGO:0030282                                                                                                                              84059/5764/100533183/144347/55512/4057/658/9365/4745/1594/54361/5744/655/359845/1893/2719/144165/2261\n           Count\nGO:0030198    42\nGO:0045229    42\nGO:0043062    42\nGO:0001525    43\nGO:0099177    37\nGO:0030282    18\n\n\n\n\n4.2.2 Análisis de enriquecimiento\nY a continuación hacemos el análsis de enriquecimiento de GO. Para este análisis sí usamos el geneList completo porque vamos a comparar todos los genes y ver qué rutas se enriquecen más en función del Fold Change de todos ellos:\n\nego3 &lt;- gseGO(geneList     = ENTREZ_geneList,\n              OrgDb        = org.Hs.eg.db,\n              ont          = \"BP\",\n              minGSSize    = 100,\n              maxGSSize    = 400,\n              #Con este argumento definimos el tamaño máximo del GeneSet que se va a utilizar (los más generales tiene más genes y son menos informativos)\n              pvalueCutoff = 0.05,\n              verbose      = FALSE)\n\ngoplot(ego3)"
  },
  {
    "objectID": "RNAseq.html#kegg-analysis",
    "href": "RNAseq.html#kegg-analysis",
    "title": "Bulk RNAseq",
    "section": "4.3 Kegg Analysis",
    "text": "4.3 Kegg Analysis\nEl paquete clusterProfiler es compatible con todos los organismos que disponen de datos de anotación KEGG en la base de datos KEGG. Los usuarios deben pasar una abreviatura del nombre académico al parámetro organism. Como argumento podemos utilizar cualquier organimo disponible en la página oficial de Kegg. De igual manera que para el análisis de GO, para Kegg también tenemos dos tipos de análisis: análisis de sobre-representación de ruta Kegg o análisis de enriquecimiento de ruta Kegg.\n\n4.3.1 Análisis de sobre-representación de ruta Kegg\nSe realiza de igual forma que el análisis GO, solo cambian algunos argumentos:\n\nkk &lt;- enrichKEGG(gene         = gene,\n                 organism     = 'hsa',\n                 pvalueCutoff = 0.05)\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"...\n\n\nWarning in utils::download.file(url, quiet = TRUE, method = method, ...): the\n'wininet' method is deprecated for http:// and https:// URLs\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"...\n\n\nWarning in utils::download.file(url, quiet = TRUE, method = method, ...): the\n'wininet' method is deprecated for http:// and https:// URLs\n\nhead(kk)\n\n               ID                                          Description\nhsa04974 hsa04974                     Protein digestion and absorption\nhsa04512 hsa04512                             ECM-receptor interaction\nhsa04933 hsa04933 AGE-RAGE signaling pathway in diabetic complications\nhsa04510 hsa04510                                       Focal adhesion\nhsa04614 hsa04614                             Renin-angiotensin system\nhsa04972 hsa04972                                 Pancreatic secretion\n         GeneRatio  BgRatio       pvalue     p.adjust       qvalue\nhsa04974    14/250 103/8586 1.493116e-06 0.0004240448 0.0003850666\nhsa04512    11/250  89/8586 5.018667e-05 0.0071265069 0.0064714388\nhsa04933    11/250 100/8586 1.467951e-04 0.0138966016 0.0126192268\nhsa04510    16/250 203/8586 2.763370e-04 0.0196199277 0.0178164651\nhsa04614     5/250  23/8586 4.400496e-04 0.0249948162 0.0226972942\nhsa04972    10/250 102/8586 7.413350e-04 0.0300770193 0.0273123415\n                                                                                  geneID\nhsa04974          1803/1360/1297/486/1294/1282/1284/1296/7373/1287/50509/1288/91522/1308\nhsa04512                          1297/3908/3691/3655/1282/1284/1287/7058/1288/3371/3676\nhsa04933                          183/27035/7056/4313/5054/1282/3552/1284/1287/1288/3553\nhsa04510 1297/1950/3908/3691/2534/2316/3655/1282/1284/10398/1287/857/7058/1288/3371/3676\nhsa04614                                                          3817/183/3816/290/1636\nhsa04972                                  5320/952/885/1360/64600/489/5874/1056/486/3778\n         Count\nhsa04974    14\nhsa04512    11\nhsa04933    11\nhsa04510    16\nhsa04614     5\nhsa04972    10\n\n\nYa tenemos un listado de las listas más significativas, ahora podemos hacer cosas como habrír una ruta KEGG on line en la cual se nos indicarán nuestros genes en rojo. Tenemos que seleccionar alguna ruta que nos haya salido en el análisis de over-representation\n\nbrowseKEGG(kk, 'hsa04974')\n\n\n\n4.3.2 Análisis de enriquecimiento (GSEA) de ruta Kegg\nAhora haríamos el enriquecimiento:\n\nmkk2 &lt;- gseMKEGG(geneList = ENTREZ_geneList,\n                 organism = 'hsa',\n                 pvalueCutoff = 1)\n\nReading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/module\"...\n\n\nWarning in utils::download.file(url, quiet = TRUE, method = method, ...): the\n'wininet' method is deprecated for http:// and https:// URLs\n\n\nReading KEGG annotation online: \"https://rest.kegg.jp/list/module\"...\n\n\nWarning in utils::download.file(url, quiet = TRUE, method = method, ...): the\n'wininet' method is deprecated for http:// and https:// URLs\n\n\npreparing geneSet collections...\n\n\nGSEA analysis...\n\n\nWarning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (5.53% of the list).\nThe order of those tied genes will be arbitrary, which may produce unexpected results.\n\n\nleading edge analysis...\n\n\ndone...\n\nhead(mkk2)\n\n           ID                                               Description setSize\nM00034 M00034                                Methionine salvage pathway      12\nM00001 M00001 Glycolysis (Embden-Meyerhof pathway), glucose =&gt; pyruvate      19\nM00912 M00912        NAD biosynthesis, tryptophan =&gt; quinolinate =&gt; NAD      10\nM00158 M00158                                 F-type ATPase, eukaryotes      17\nM00050 M00050       Guanine ribonucleotide biosynthesis, IMP =&gt; GDP,GTP      12\nM00087 M00087                                            beta-Oxidation      12\n       enrichmentScore       NES      pvalue  p.adjust    qvalue rank\nM00034      -0.7783792 -1.760118 0.003909259 0.1485518 0.1440253 1249\nM00001      -0.6566308 -1.625438 0.018660476 0.2851396 0.2764512 4010\nM00912       0.7626680  1.618179 0.022511022 0.2851396 0.2764512  729\nM00158      -0.6162543 -1.481003 0.056339526 0.4137931 0.4011844 3945\nM00050      -0.6508136 -1.471659 0.061833689 0.4137931 0.4011844 2912\nM00087       0.6450831  1.431263 0.069418386 0.4137931 0.4011844 3219\n                         leading_edge\nM00034  tags=33%, list=8%, signal=31%\nM00001 tags=74%, list=26%, signal=55%\nM00912  tags=30%, list=5%, signal=29%\nM00158 tags=59%, list=26%, signal=44%\nM00050 tags=67%, list=19%, signal=54%\nM00087 tags=50%, list=21%, signal=40%\n                                                             core_enrichment\nM00034                                                  58478/4507/6723/4143\nM00001 3098/5230/226/7167/5315/2821/2027/83440/2597/5214/2023/5223/2645/5213\nM00912                                                        8564/3620/8942\nM00158                             521/498/509/515/4508/516/4509/506/518/513\nM00050                             2987/4833/8833/4831/3615/654364/4830/3614\nM00087                                              1962/33/10449/51/8310/37\n\n\nY podremos hacer cosas como la siguiente:\n\nhsa04110 &lt;- pathview(gene.data  = ENTREZ_geneList,\n                     pathway.id = \"hsa04974\",\n                     species    = \"hsa\",\n                     limit      = list(gene=max(abs(ENTREZ_geneList)), cpd=1))\n\n'select()' returned 1:1 mapping between keys and columns\n\n\nInfo: Working in directory E:/Accesos directos Importantes/R_Projects/Learning\n\n\nInfo: Writing image file hsa04974.pathview.png\n\n\nInfo: some node width is different from others, and hence adjusted!\n\nimage &lt;- image_read(\"E:/Accesos directos Importantes/Estancia CRG/Apuntes/3 Bulk RNAseq/R_workspace/hsa04974.pathview.png\")\nprint(image, info=FALSE)"
  },
  {
    "objectID": "RNAseq.html#gsea-analisis-msigdb",
    "href": "RNAseq.html#gsea-analisis-msigdb",
    "title": "Bulk RNAseq",
    "section": "4.4 GSEA Analisis (MSigDb)",
    "text": "4.4 GSEA Analisis (MSigDb)\nEste es el GSEA que conocemos de usarlo en el laboratorio. Creo que estabamos todos errados creyendo que erea el único GSEA que que existía porque ya estamos viendo que se puede hacer con cualquier base de datos. Este está basado en Molecular Signatures Database (MSigDb), que consiste en una colección gene sets con annotaciones a rutas. Como sabeis hay varias categorías de GSEA:\n\nH: hallmark gene sets\nC1: Gene Sets posicionales\nC2: Gene Sets curados\nC3: Gene Sets con motivos\nC4: Gene Sets computacionales\nC5: Gene Sets GO\nC6: signatures oncogénicas\nC7: signatures inmunológicas\n\nDe manera que antes de comezar a hacer cualquier tipo de análisis hay que definir la categoría que queremos analizar:\n\nGSEA_H &lt;- msigdbr(species = \"Homo sapiens\", category = \"H\") %&gt;% \n  dplyr::select(gs_name, entrez_gene)\n\n\nOver-representation\n\n\nem &lt;- enricher(gene, TERM2GENE=GSEA_H)\nhead(em)\n\n                                                                                   ID\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\nHALLMARK_MYOGENESIS                                               HALLMARK_MYOGENESIS\nHALLMARK_APICAL_JUNCTION                                     HALLMARK_APICAL_JUNCTION\nHALLMARK_COAGULATION                                             HALLMARK_COAGULATION\n                                                                          Description\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\nHALLMARK_MYOGENESIS                                               HALLMARK_MYOGENESIS\nHALLMARK_APICAL_JUNCTION                                     HALLMARK_APICAL_JUNCTION\nHALLMARK_COAGULATION                                             HALLMARK_COAGULATION\n                                           GeneRatio  BgRatio       pvalue\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION    36/191 200/4383 6.292591e-14\nHALLMARK_MYOGENESIS                           19/191 200/4383 9.709807e-04\nHALLMARK_APICAL_JUNCTION                      18/191 200/4383 2.438629e-03\nHALLMARK_COAGULATION                          14/191 138/4383 2.474245e-03\n                                               p.adjust       qvalue\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION 2.768740e-12 2.252085e-12\nHALLMARK_MYOGENESIS                        2.136158e-02 1.737544e-02\nHALLMARK_APICAL_JUNCTION                   2.721669e-02 2.213798e-02\nHALLMARK_COAGULATION                       2.721669e-02 2.213798e-02\n                                                                                                                                                                                                                            geneID\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION 290/6641/3908/2817/3487/4232/2316/4312/10085/1462/5744/4313/6586/6422/3485/5054/1294/1282/26577/1893/1284/627/1296/1009/10398/11010/6678/7058/7169/3624/6424/50509/10631/3371/6876/4314\nHALLMARK_MYOGENESIS                                                                                                              25803/8912/4151/1837/11156/29970/3908/3691/6261/4842/10468/1284/6678/7169/165/2273/6876/3490/1012\nHALLMARK_APICAL_JUNCTION                                                                                                            1297/247/6376/3691/1825/84552/8745/1462/4313/5010/1009/10398/6624/11096/83700/143903/4318/1308\nHALLMARK_COAGULATION                                                                                                                                         1803/3158/4316/2534/2161/7056/4312/4313/5055/5054/6678/4319/4318/4314\n                                           Count\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION    36\nHALLMARK_MYOGENESIS                           19\nHALLMARK_APICAL_JUNCTION                      18\nHALLMARK_COAGULATION                          14\n\n\n\nGSEA\n\n\nem2 &lt;- GSEA(ENTREZ_geneList, TERM2GENE = GSEA_H)\nhead(em2)\n\n                                                                                   ID\nHALLMARK_MYC_TARGETS_V1                                       HALLMARK_MYC_TARGETS_V1\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\nHALLMARK_MYC_TARGETS_V2                                       HALLMARK_MYC_TARGETS_V2\nHALLMARK_INTERFERON_GAMMA_RESPONSE                 HALLMARK_INTERFERON_GAMMA_RESPONSE\nHALLMARK_E2F_TARGETS                                             HALLMARK_E2F_TARGETS\nHALLMARK_BILE_ACID_METABOLISM                           HALLMARK_BILE_ACID_METABOLISM\n                                                                          Description\nHALLMARK_MYC_TARGETS_V1                                       HALLMARK_MYC_TARGETS_V1\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\nHALLMARK_MYC_TARGETS_V2                                       HALLMARK_MYC_TARGETS_V2\nHALLMARK_INTERFERON_GAMMA_RESPONSE                 HALLMARK_INTERFERON_GAMMA_RESPONSE\nHALLMARK_E2F_TARGETS                                             HALLMARK_E2F_TARGETS\nHALLMARK_BILE_ACID_METABOLISM                           HALLMARK_BILE_ACID_METABOLISM\n                                           setSize enrichmentScore       NES\nHALLMARK_MYC_TARGETS_V1                        196      -0.6838009 -2.508826\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION     186      -0.6521398 -2.384998\nHALLMARK_MYC_TARGETS_V2                         56      -0.7829536 -2.366002\nHALLMARK_INTERFERON_GAMMA_RESPONSE             183       0.5484440  1.963996\nHALLMARK_E2F_TARGETS                           197      -0.5122329 -1.884108\nHALLMARK_BILE_ACID_METABOLISM                   98       0.5695655  1.879396\n                                                 pvalue     p.adjust\nHALLMARK_MYC_TARGETS_V1                    1.000000e-10 2.500000e-09\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION 1.000000e-10 2.500000e-09\nHALLMARK_MYC_TARGETS_V2                    1.870533e-10 3.117556e-09\nHALLMARK_INTERFERON_GAMMA_RESPONSE         4.769111e-08 5.961389e-07\nHALLMARK_E2F_TARGETS                       1.855929e-07 1.855929e-06\nHALLMARK_BILE_ACID_METABOLISM              2.278905e-05 1.899088e-04\n                                                 qvalue rank\nHALLMARK_MYC_TARGETS_V1                    1.105263e-09 4003\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION 1.105263e-09 1033\nHALLMARK_MYC_TARGETS_V2                    1.378288e-09 1673\nHALLMARK_INTERFERON_GAMMA_RESPONSE         2.635561e-07 3922\nHALLMARK_E2F_TARGETS                       8.205161e-07 4265\nHALLMARK_BILE_ACID_METABOLISM              8.395966e-05 2408\n                                                             leading_edge\nHALLMARK_MYC_TARGETS_V1                    tags=76%, list=26%, signal=57%\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION  tags=34%, list=7%, signal=32%\nHALLMARK_MYC_TARGETS_V2                    tags=71%, list=11%, signal=64%\nHALLMARK_INTERFERON_GAMMA_RESPONSE         tags=51%, list=25%, signal=38%\nHALLMARK_E2F_TARGETS                       tags=52%, list=28%, signal=38%\nHALLMARK_BILE_ACID_METABOLISM              tags=36%, list=16%, signal=30%\ncore_enrichment\nHALLMARK_MYC_TARGETS_V1                    5230/6637/5887/6164/6626/5683/6434/65005/890/8894/9377/6428/11335/6175/5704/7514/26354/10935/4999/6629/5709/23435/3183/7419/2079/7555/6634/6141/10213/4176/3838/26986/2935/7411/6627/8454/9868/57819/4686/1977/5688/5496/6204/5707/23196/3608/8669/7458/220988/26121/22916/6146/6194/10907/5478/2058/4706/3066/3735/7307/4173/2806/6128/2547/6188/10155/7965/7203/8664/6427/10921/7284/10549/10971/6432/10728/3178/1965/1537/22948/23016/9045/6741/10054/3184/3192/3336/10574/2107/10399/10575/5634/6193/51690/11331/6633/54107/11260/1964/7416/23450/10576/10528/51020/6418/3837/1207/26156/4953/7027/6950/10856/8886/3326/6632/1973/8662/3615/8761/6059/26135/11137/1933/5245/5901/10146/5425/55651/5036/3251/3329/4830/708/4869/4673/10492/9188/51491/1503/9221/2091/1019/4609/4175/4171/790/5902/9136/6723\nHALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION                                                                                                                                                                                                                                                                                                                                                                                                                                                                             7980/3909/2014/3688/25878/1647/79709/5654/2192/30008/10272/1000/6382/4016/1303/2882/649/374/4035/3491/2697/284217/22943/3956/7040/667/6591/7078/800/3908/2817/3487/4232/2316/4312/10085/1462/5744/4313/6586/6422/3485/5054/1294/1282/26577/1893/1284/627/1296/1009/10398/11010/6678/7058/7169/3624/6424/50509/10631/3371/6876/4314\nHALLMARK_MYC_TARGETS_V2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       3336/3177/6832/83743/64216/9238/79077/2193/4839/10528/81887/8886/29078/705/92856/23481/5245/10171/5036/56915/23160/10196/3329/6949/51388/27340/80324/4869/51491/56342/9221/51154/1019/6573/4609/10514/23223/10244/9136/6723\nHALLMARK_INTERFERON_GAMMA_RESPONSE                                                                                                                                                                                                                                                                                                               952/6398/3620/3108/8743/629/219285/81030/55024/972/4261/5142/57674/716/10906/10875/669/3569/710/5359/94240/8767/8673/3430/5777/1439/3627/837/84159/10628/840/80830/4283/3394/4939/10561/3123/115361/91543/3429/55601/5699/6373/54625/3717/3091/3431/6772/9246/55008/3383/3665/9111/7127/6773/5743/6774/129607/5698/10964/3600/3669/4600/8202/23424/10437/9961/3117/7130/10791/684/6775/84166/27348/23586/9021/3455/4061/57169/3434/836/841/57162/10135/6347/3437/116071/10379/8082/64761/567/7453/317649\nHALLMARK_E2F_TARGETS                                                                                                                                                                                                                                                                            11004/9700/3159/6426/79075/4085/332/3014/675/5511/6434/6839/11200/9126/5347/10733/6790/9212/10274/5982/7514/4999/983/1164/6241/5395/147841/51155/55635/4176/3838/2935/9837/7374/23468/7884/5631/4678/11340/27338/23649/3930/84844/10527/580/51747/4173/2547/9972/6427/7153/10212/5411/10549/11051/29893/10111/57122/84312/204/1965/79677/9125/23165/1633/701/6628/3609/3184/1111/3070/5424/9238/54962/79077/4172/1786/10460/10528/10797/64785/6749/5591/1434/5901/5425/5036/7037/4830/4673/10492/10606/1503/9221/1019/4609/4175/55646/4171/5902/9319/9232\nHALLMARK_BILE_ACID_METABOLISM                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         8630/9963/189/27232/51170/51302/367/1718/8800/1593/654/24/3417/3418/2053/3992/9415/51703/2180/4306/3295/847/92960/1734/6342/3932/5825/5194/10133/2730/11001/50640/23461/80270/23600"
  },
  {
    "objectID": "RNAseq.html#network-of-cancer-genes-ncg-analisis",
    "href": "RNAseq.html#network-of-cancer-genes-ncg-analisis",
    "title": "Bulk RNAseq",
    "section": "4.5 Network of Cancer Genes (NCG) Analisis",
    "text": "4.5 Network of Cancer Genes (NCG) Analisis\nNetwork of Cancer Gene (NCG) (A. et al. 2016) es un repositorio generado de forma naualde genes implicados en cáncer. La versión 5.0 de NCG (agosto de 2015) recoge 1.571 genes del cáncer de 175 estudios publicados. El paquete DOSE permite analizar la lista de genes y determinar si están enriquecidos en genes que se sabe que están mutados en un determinado tipo de cáncer.\nTambién podemos realizar los dos tipos de análisis:\n\nOver-representation\n\n\nedo&lt;-enrichNCG(gene)\nhead(edo)\n\n[1] ID          Description GeneRatio   BgRatio     pvalue      p.adjust   \n[7] qvalue      geneID      Count      \n&lt;0 rows&gt; (or 0-length row.names)\n\n\n\nGSEA\n\n\nncg &lt;- gseNCG(ENTREZ_geneList,\n              pvalueCutoff  = 0.5,\n              pAdjustMethod = \"BH\",\n              verbose       = FALSE)\nncg &lt;- setReadable(ncg, 'org.Hs.eg.db')\nhead(ncg, 3)\n\n                                                               ID\nchronic_myeloid_leukemia                 chronic_myeloid_leukemia\npancreatic_ductal_adenocarcinoma pancreatic_ductal_adenocarcinoma\nlung_squamous_cell_carcinoma         lung_squamous_cell_carcinoma\n                                                      Description setSize\nchronic_myeloid_leukemia                 chronic_myeloid_leukemia      25\npancreatic_ductal_adenocarcinoma pancreatic_ductal_adenocarcinoma     121\nlung_squamous_cell_carcinoma         lung_squamous_cell_carcinoma      20\n                                 enrichmentScore       NES      pvalue\nchronic_myeloid_leukemia              -0.6899982 -1.775986 0.001608256\npancreatic_ductal_adenocarcinoma      -0.4578916 -1.596532 0.001173594\nlung_squamous_cell_carcinoma          -0.6855268 -1.671460 0.008245063\n                                   p.adjust     qvalue rank\nchronic_myeloid_leukemia         0.06835087 0.06094443  209\npancreatic_ductal_adenocarcinoma 0.06835087 0.06094443 1558\nlung_squamous_cell_carcinoma     0.21629783 0.19285998 1398\n                                                   leading_edge\nchronic_myeloid_leukemia          tags=36%, list=1%, signal=36%\npancreatic_ductal_adenocarcinoma tags=21%, list=10%, signal=19%\nlung_squamous_cell_carcinoma      tags=30%, list=9%, signal=27%\n                                                                                                                                                                     core_enrichment\nchronic_myeloid_leukemia                                                                                                        MSH6/FGF2/UCHL5/NR3C1/SETBP1/COL7A1/FAT3/CSPG4/CSMD2\npancreatic_ductal_adenocarcinoma COL5A1/GLI3/TYSND1/ELN/NRG2/RASSF6/RP1L1/SFXN4/WDR75/DOCK2/PREX2/UTP20/CEP83/TGFBR2/IRF6/SCN5A/VWF/CARD10/FMNL3/FAT2/UNC13C/COL14A1/DLC1/IL1B/CDH13\nlung_squamous_cell_carcinoma                                                                                                                     ZNF521/EPB41L3/FAT4/NAV3/WIF1/CDH11"
  },
  {
    "objectID": "RNAseq.html#graficando-los-análisis-de-over-representation-y-gsea",
    "href": "RNAseq.html#graficando-los-análisis-de-over-representation-y-gsea",
    "title": "Bulk RNAseq",
    "section": "4.6 Graficando los análisis de Over-representation y GSEA",
    "text": "4.6 Graficando los análisis de Over-representation y GSEA\nTambién podemos hacer la representación de los datos con distintos tipos de gráficas, que por ejemplo lo vamos a hacer con el dataset que hemos creado para KEGG: - Barplot\n\n#imput Over-representatition\nbarplot(kk, showCategory = 20)\n\n\n\n\n\n#imput Over-representatition\nmutate(kk, q_score = -log(p.adjust, base=10)) %&gt;% \n    barplot(x=\"q_score\")\n\n\n\n\n\nDot plot (bubble-plot)\n\n\n#imput Over-representation y GSEA\n#En este caso, imput over-representation\ndotplot(kk, showCategory=10) + ggtitle(\"dotplot for Kegg GSEA \\n Analisis\")\n\n\n\n\n\n#imput GSEA\ndotplot(mkk2, showCategory=10) + ggtitle(\"dotplot for Kegg GSEA \\n Analisis\")\n\n\n\n\n\nGene-Concept Network:\n\n\n#imput Over-representatition y GSEA\n## convert gene ID to Symbol\nedox &lt;- setReadable(mkk2, 'org.Hs.eg.db', 'ENTREZID')\ncnetplot(edox, foldChange=ENTREZ_geneList)\n\n\n\n\n\n## categorySize can be scaled by 'pvalue' or 'geneNum'\ncnetplot(edox, categorySize=\"pvalue\", foldChange=geneList)\n\n\n\n\n\ncnetplot(edox, foldChange=ENTREZ_geneList, circular = TRUE, colorEdge = TRUE,\n         cex.params = list(category_node = 0.5, gene_node = 0.25, category_label = 1, gene_label = 0.3)) \n\n\n\n\n\nHeatmap-like functional classification\n\n\n#imput Over-representatition y GSEA\nheatplot(edox, foldChange=ENTREZ_geneList, showCategory=5)\n\n\n\n\nTree plot: realiza un clasificación no supervisada de los téminos enriquecidos en base a las similitudes entre términos\n\n#imput Over-representatition y GSEA\nedox2 &lt;- pairwise_termsim(edox)\ntreeplot(edox2, hclust_method = \"average\")\n\n\n\n\n\nRidgeline\n\n\n#imput GSEA\nridgeplot(\n  mkk2,\n  showCategory = 8,\n  fill = \"p.adjust\",\n  core_enrichment = TRUE,\n  label_format = 40,\n  orderBy = \"NES\",\n  decreasing = FALSE\n)\n\nPicking joint bandwidth of 0.299"
  },
  {
    "objectID": "AS_Analysis.html",
    "href": "AS_Analysis.html",
    "title": "Alternative Splicing",
    "section": "",
    "text": "Matt es un paquete diseñado por Dr. Manuel Irimia para el análisis de eventos de splicing alternativo. Incluye funciones básicas para la manipulación de tablas, extracción de características relacionadas con exones e intrones, análisis de características discriminantes, mapas de motivos para proteínas de unión a ARN, etc. Cita:\nGohr, M. Irimia Matt: Unix tools for alternative splicing analysis, Bioinformatics, 2019, DOI: 10.1093/bioinformatics/bty606\n\n\n\n\n\n\nTrabajamos en Terminal\n\n\n\n\n\n\n\n\nEn el terminal, nos movemos a la carpeta donde queramos guardar Matt en nuestro ordenador o superordenador. Una vez ahí tenemos que crear un clon del repositorio de git:\n\ngit clone https://gitlab.com/aghr/matt.git\n\nA continuación, tenemos que ejecutar el script de instalación:\n\nchmod u+rwx ./INSTALL\n\nY corremos el script:\n\n./INSTALL\n\nUna vez tengamos instalado Matt temenos que hacer que sus funciones formen parte del PATH para que se pueda ejecutar desde cualquier carpeta. Esto lo hacemos con la siguiente línea de comandos:\n\nexport PATH=~/directorio/donde/hayas/guardado/matt:$PATH\necho 'export PATH=~ directorio/donde/hayas/guardado/matt:$PATH' &gt;&gt; ~/.bashrc\n\nPara comprobar que temenos matt instalado Podemos hacer la prueba de esctibir en el terminal el propio nombre:\n\nmatt\n\nY el output que nos debe devolver es el siguiente:\n\nMatt v. 1.3.1\n\nUsage: matt &lt;command&gt; ...\n\nCommands:\n\n*Import data / check table                             *Maths and statistics\n  chk_nls:  check newlines in table                      col_calc:  apply calculations to columns\n.\n.\n..\n.\n.\n  test_regexp_enrich: test REGEXP enrichment\n\nAttention: Tables processed by Matt must contain a header with column names and must not contain \" characters with exception of regular expressions. All other \" characters will be ignored and removed. When using MS Excel for table generation, please save tables in format Windows Text. Matt recognizes Windows newlines, but not DOS nor old-style MacOS newlines (CR or \\r only). Use command chk_nls to see and check newlines in tables.\n\nUna vez instalado matt, es necesario comprobar que temenos instalado una de las herramientas del NCBI que es la que utiliza para funcionar: SRA-Tool Kit.\n\n\n\nPara comprobar si la temenos, en debemos hacer la prueba de esctibir en el terminal una de sus funciones, como por ejemplo:\n\nsra\n\nY el output que nos debe devolver es el siguiente:\n\nsra-pileup             sra-search.3           sra-sort-cg.3.0.7      sra-stat.3.0.7         sratools.3.0.7\nsra-pileup-orig.3.0.7  sra-search.3.0.7       sra-sort.3             srapath\nsra-pileup.3           sra-sort               sra-sort.3.0.7         srapath-orig.3.0.7\nsra-pileup.3.0.7       sra-sort-cg            sra-stat               srapath.3\nsra-search             sra-sort-cg.3          sra-stat.3             srapath.3.0.7\n\nTambién debemos comprobar la versión de que tenemos instalada (debe de ser superior a la 2.8.0):\n\nvdb-config –version\n\nEl output será el siguiente:\n\nSRA-Toolkit 3.0.7\n\nSi tienes la última versión guay, sino tienes que instalarla mediante los siguientes comandos en el terminal (comando cogidos de la página oficial para Linux, si tienes Mac o Windows busca en la página principal de SRA (enlace) la forma de instalarlo).\nPrimero descargamos la herramienta (recomendable crear una carpeta donde meterlo)\n\nwget --output-document sratoolkit.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz\n\nA continuación lo instalamos:\n\ntar -vxzf sratoolkit.tar.gz\n\nA continuación metemos la herramienta en el PATH:\n\nexport PATH=~/directorio/donde/hayas/guardado/sratoolkit.current-ubuntu64.tar.gz/bin:$PATH\necho 'export PATH=~ directorio/donde/hayas/guardado/sratoolkit.current-ubuntu64.tar.gz/bin:$PATH' &gt;&gt; ~/.bashrc\n\nA continuación es recommendable comprobar que funciona:\n\nwhich fastq-dump\n\nEl output será el siguiente:\n\n/Users/JoeUser/sratoolkit.current-ubuntu64.tar.gz/bin /fastq-dump\n\nTambién podemos probar que sea funcional:\n\nfastq-dump --stdout -X 2 SRR390728\n\nEl output será el siguiente:\n\nRead 2 spots for SRR390728\nWritten 2 spots for SRR390728\n@SRR390728.1 1 length=72\nCATTCTTCACGTAGTTCTCGAGCCTTGGTTTTCAGCGATGGAGAATGACTTTGACAAGCTGAGAGAAGNTNC\n+SRR390728.1 1 length=72\n;;;;;;;;;;;;;;;;;;;;;;;;;;;9;;665142;;;;;;;;;;;;;;;;;;;;;;;;;;;;;96&&&&(\n@SRR390728.2 2 length=72\nAAGTAGGTCTCGTCTGTGTTTTCTACGAGCTTGTGTTCCAGCTGACCCACTCCCTGGGTGGGGGGACTGGGT\n+SRR390728.2 2 length=72\n;;;;;;;;;;;;;;;;;4;;;;3;393.1+4&&5&&;;;;;;;;;;;;;;;;;;;;;&lt;9;&lt;;;;;;464262\n\n\n\n\n\n\n\nNote\n\n\n\nTodo lo hecho a partir de aquí está en Terminal_9-14-23.txt\n\n\n\n\n\nPara cargar los datos vamos a usar una función de matt (retr_rnaseq) que permite al usuario recuperar datos de ARN-seq del Gene Expression Omnibus (GEO), un repositorio público donde muchos investigadores almacenan sus datos de ARN-seq relacionados con sus publicaciones. Teniendo a mano los números de acceso GEO de los conjuntos de datos RNA-seq, este comando descarga los archivos SRA, extrae las lecturas de ARN-seq como archivos FASTQ o FASTA y, si lo desea renombra los archivos FASTA/FASTQ extraídos como especifique el usuario.\nPara ello tenemos que crear un .txt (con los nombres separados por un tab) como en el ejemplo:\n\n\n\nImagen 1\n\n\nUna vez que lo tenemos creado tenemos que subirlo a la misma carpeta en la que vayamos a hacer la descarga de los datos y los análisis. El siguiente paso es descargar de GEO los .gz de las muestras seleccionadas:\n\nmatt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6\n\nCon este comando lo que hacemos es que se descarguen lo indicado (indicando el documento en el que se encuentran los datos, sin borrar los archivos SRA (-keepsra) en una carpeta nueva (-o rnaseq_data) y que el trabajo se divida entre 6 cores del superordenador (-p 6)\nEste comando tarda bastante por lo que es recomendable usar los siguientes comandos para poner en segundo plano un trabajo y desvincularlos de la sesión de trabajo, lo cual es recomendable porque nos permitirá continuar trabajando en el servidor mientras se están ejecutando los trabajos mandados. Otra ventaja es que, al desvincularlos de la sesión de trabajo podremos cerrar el terminal sin preocuparnos de que se paren los procesos. Si cerráramos el terminal sin desvincular el trabajo de nuestra sesión (la sesión está asociada al terminal de trabajo) este trabajo se interrumpiría en el momento de cerrar el terminal (y, por lo tanto, la sesión). Para ello debemos ejecutar lo siguientes comandos:\n\nEjecutamos el trabajo que queramos hacer, en nuestro caso usaremos el ejemplo anterior:\n\n\nmatt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6\n\n\nTras esto comenzará a ejecutarse. En este momento tenemos que parar el proceso con la combinación de teclas Control + z. El output debe ser el siguiente:\n\n\n[1]+  Stopped                 matt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6\n\n\nEn este punto tendremos el proceso parado y podremos escribir comandos. Lo siguiente que debemos hacer es mandar el trabajo a ejecutarse en segundo plano (mandar al background) con el siguiente comando:\n\n\nbg\n\n#Output:\n\n[1]+ matt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6 &\n  \n#Y significará que se ha reanudado la ejecución en segundo plano. \n\n\n\n\n\n\n\nTip\n\n\n\nY significará que se ha reanudado la ejecución en segundo plano.\n\nmatt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6 &\n\n\n\n\nUna vez que hayamos ejecutado el proceso en segundo plano pasamos al siguiente paso que es desvincular el proceso del terminal (sesión) en el que lo hemos corrido para que continúe ejecutándose si cerramos sesión. Para ello usamos el comando:\n\n\ndisown\n\nEl output del terminal no se guardará en ningún lado si los cerramos (el terminal) de manera que si queremos dejar un proceso funcionando y luego poder consultar qué mensajes nos ha dado el proceso (para chequear si ha ido bien o ha habido algún error durante el procesamiento). Podemos hacer que los mensajes que saldrían en el terminal se guarden en un .txt para luego poder consultarlos utilizando el siguiente comando:\n\nProceso_mandado_a_ejecutar 1&gt;Nombre_que_le_quieras_poner_al_documento.out\n\nEste comando debe de utilizarse de la siguiente manera (en el siguiente ejemplo mi documento se llamará documento_ejemplo.out y lo voy a ejecutar directamente en segundo plano con el comando “&” previamente explicado):\n\nmatt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6 1&gt;documento_ejemplo.out &\n\nCon esto haremos que se guarde un documento .out (que se puede leer como .txt) en la carpeta en la que estemos trabajando y que el proceso se lance directamente en segundo plano por lo que solo necesitaríamos aplicar el comando disown para desvincularlo de la sesión y podremos descuidarnos.\nLos datos se nos descargaran en la carpeta rnaseq_data que hemos escrito en el código ejecutado. Cuando finalice, accedemos a esa carpeta y ejecutamos el comando ls (para ver el listado de archivos que contiene esta carpeta) veremos lo siguiente:\n\nBasal_2_1.fastq.gz      Luminal_1_1.fastq.gz        Luminal_2_1.fastq.gz    SRR1919599.sra      SRR1919603.sra\nBasal_2_2.fastq.gz      Luminal_2_2.fastq.gz    SRR1919600.sra          SRR1919604.sra  dataset_info.tab\nBasal_1_1.fastq.gz              Basal_3_1.fastq.gz          Luminal_3_1.fastq.gz    SRR1919601.sra      Basal_1_2.fastq.gz          \nBasal_3_2.fastq.gz      Luminal_1_2.fastq.gz        Luminal_3_2.fastq.gz    SRR1919602.sra  \n\nUna vez en este punto comenzaremos el alineamiento con Vast-Tools."
  },
  {
    "objectID": "AS_Analysis.html#instalación-de-matt",
    "href": "AS_Analysis.html#instalación-de-matt",
    "title": "Alternative Splicing",
    "section": "",
    "text": "En el terminal, nos movemos a la carpeta donde queramos guardar Matt en nuestro ordenador o superordenador. Una vez ahí tenemos que crear un clon del repositorio de git:\n\ngit clone https://gitlab.com/aghr/matt.git\n\nA continuación, tenemos que ejecutar el script de instalación:\n\nchmod u+rwx ./INSTALL\n\nY corremos el script:\n\n./INSTALL\n\nUna vez tengamos instalado Matt temenos que hacer que sus funciones formen parte del PATH para que se pueda ejecutar desde cualquier carpeta. Esto lo hacemos con la siguiente línea de comandos:\n\nexport PATH=~/directorio/donde/hayas/guardado/matt:$PATH\necho 'export PATH=~ directorio/donde/hayas/guardado/matt:$PATH' &gt;&gt; ~/.bashrc\n\nPara comprobar que temenos matt instalado Podemos hacer la prueba de esctibir en el terminal el propio nombre:\n\nmatt\n\nY el output que nos debe devolver es el siguiente:\n\nMatt v. 1.3.1\n\nUsage: matt &lt;command&gt; ...\n\nCommands:\n\n*Import data / check table                             *Maths and statistics\n  chk_nls:  check newlines in table                      col_calc:  apply calculations to columns\n.\n.\n..\n.\n.\n  test_regexp_enrich: test REGEXP enrichment\n\nAttention: Tables processed by Matt must contain a header with column names and must not contain \" characters with exception of regular expressions. All other \" characters will be ignored and removed. When using MS Excel for table generation, please save tables in format Windows Text. Matt recognizes Windows newlines, but not DOS nor old-style MacOS newlines (CR or \\r only). Use command chk_nls to see and check newlines in tables.\n\nUna vez instalado matt, es necesario comprobar que temenos instalado una de las herramientas del NCBI que es la que utiliza para funcionar: SRA-Tool Kit."
  },
  {
    "objectID": "AS_Analysis.html#instalación-de-sra-toolkit",
    "href": "AS_Analysis.html#instalación-de-sra-toolkit",
    "title": "Alternative Splicing",
    "section": "",
    "text": "Para comprobar si la temenos, en debemos hacer la prueba de esctibir en el terminal una de sus funciones, como por ejemplo:\n\nsra\n\nY el output que nos debe devolver es el siguiente:\n\nsra-pileup             sra-search.3           sra-sort-cg.3.0.7      sra-stat.3.0.7         sratools.3.0.7\nsra-pileup-orig.3.0.7  sra-search.3.0.7       sra-sort.3             srapath\nsra-pileup.3           sra-sort               sra-sort.3.0.7         srapath-orig.3.0.7\nsra-pileup.3.0.7       sra-sort-cg            sra-stat               srapath.3\nsra-search             sra-sort-cg.3          sra-stat.3             srapath.3.0.7\n\nTambién debemos comprobar la versión de que tenemos instalada (debe de ser superior a la 2.8.0):\n\nvdb-config –version\n\nEl output será el siguiente:\n\nSRA-Toolkit 3.0.7\n\nSi tienes la última versión guay, sino tienes que instalarla mediante los siguientes comandos en el terminal (comando cogidos de la página oficial para Linux, si tienes Mac o Windows busca en la página principal de SRA (enlace) la forma de instalarlo).\nPrimero descargamos la herramienta (recomendable crear una carpeta donde meterlo)\n\nwget --output-document sratoolkit.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz\n\nA continuación lo instalamos:\n\ntar -vxzf sratoolkit.tar.gz\n\nA continuación metemos la herramienta en el PATH:\n\nexport PATH=~/directorio/donde/hayas/guardado/sratoolkit.current-ubuntu64.tar.gz/bin:$PATH\necho 'export PATH=~ directorio/donde/hayas/guardado/sratoolkit.current-ubuntu64.tar.gz/bin:$PATH' &gt;&gt; ~/.bashrc\n\nA continuación es recommendable comprobar que funciona:\n\nwhich fastq-dump\n\nEl output será el siguiente:\n\n/Users/JoeUser/sratoolkit.current-ubuntu64.tar.gz/bin /fastq-dump\n\nTambién podemos probar que sea funcional:\n\nfastq-dump --stdout -X 2 SRR390728\n\nEl output será el siguiente:\n\nRead 2 spots for SRR390728\nWritten 2 spots for SRR390728\n@SRR390728.1 1 length=72\nCATTCTTCACGTAGTTCTCGAGCCTTGGTTTTCAGCGATGGAGAATGACTTTGACAAGCTGAGAGAAGNTNC\n+SRR390728.1 1 length=72\n;;;;;;;;;;;;;;;;;;;;;;;;;;;9;;665142;;;;;;;;;;;;;;;;;;;;;;;;;;;;;96&&&&(\n@SRR390728.2 2 length=72\nAAGTAGGTCTCGTCTGTGTTTTCTACGAGCTTGTGTTCCAGCTGACCCACTCCCTGGGTGGGGGGACTGGGT\n+SRR390728.2 2 length=72\n;;;;;;;;;;;;;;;;;4;;;;3;393.1+4&&5&&;;;;;;;;;;;;;;;;;;;;;&lt;9;&lt;;;;;;464262\n\n\n\n\n\n\n\nNote\n\n\n\nTodo lo hecho a partir de aquí está en Terminal_9-14-23.txt"
  },
  {
    "objectID": "AS_Analysis.html#cargar-los-datos-del-dataset-seleccionados",
    "href": "AS_Analysis.html#cargar-los-datos-del-dataset-seleccionados",
    "title": "Alternative Splicing",
    "section": "",
    "text": "Para cargar los datos vamos a usar una función de matt (retr_rnaseq) que permite al usuario recuperar datos de ARN-seq del Gene Expression Omnibus (GEO), un repositorio público donde muchos investigadores almacenan sus datos de ARN-seq relacionados con sus publicaciones. Teniendo a mano los números de acceso GEO de los conjuntos de datos RNA-seq, este comando descarga los archivos SRA, extrae las lecturas de ARN-seq como archivos FASTQ o FASTA y, si lo desea renombra los archivos FASTA/FASTQ extraídos como especifique el usuario.\nPara ello tenemos que crear un .txt (con los nombres separados por un tab) como en el ejemplo:\n\n\n\nImagen 1\n\n\nUna vez que lo tenemos creado tenemos que subirlo a la misma carpeta en la que vayamos a hacer la descarga de los datos y los análisis. El siguiente paso es descargar de GEO los .gz de las muestras seleccionadas:\n\nmatt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6\n\nCon este comando lo que hacemos es que se descarguen lo indicado (indicando el documento en el que se encuentran los datos, sin borrar los archivos SRA (-keepsra) en una carpeta nueva (-o rnaseq_data) y que el trabajo se divida entre 6 cores del superordenador (-p 6)\nEste comando tarda bastante por lo que es recomendable usar los siguientes comandos para poner en segundo plano un trabajo y desvincularlos de la sesión de trabajo, lo cual es recomendable porque nos permitirá continuar trabajando en el servidor mientras se están ejecutando los trabajos mandados. Otra ventaja es que, al desvincularlos de la sesión de trabajo podremos cerrar el terminal sin preocuparnos de que se paren los procesos. Si cerráramos el terminal sin desvincular el trabajo de nuestra sesión (la sesión está asociada al terminal de trabajo) este trabajo se interrumpiría en el momento de cerrar el terminal (y, por lo tanto, la sesión). Para ello debemos ejecutar lo siguientes comandos:\n\nEjecutamos el trabajo que queramos hacer, en nuestro caso usaremos el ejemplo anterior:\n\n\nmatt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6\n\n\nTras esto comenzará a ejecutarse. En este momento tenemos que parar el proceso con la combinación de teclas Control + z. El output debe ser el siguiente:\n\n\n[1]+  Stopped                 matt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6\n\n\nEn este punto tendremos el proceso parado y podremos escribir comandos. Lo siguiente que debemos hacer es mandar el trabajo a ejecutarse en segundo plano (mandar al background) con el siguiente comando:\n\n\nbg\n\n#Output:\n\n[1]+ matt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6 &\n  \n#Y significará que se ha reanudado la ejecución en segundo plano. \n\n\n\n\n\n\n\nTip\n\n\n\nY significará que se ha reanudado la ejecución en segundo plano.\n\nmatt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6 &\n\n\n\n\nUna vez que hayamos ejecutado el proceso en segundo plano pasamos al siguiente paso que es desvincular el proceso del terminal (sesión) en el que lo hemos corrido para que continúe ejecutándose si cerramos sesión. Para ello usamos el comando:\n\n\ndisown\n\nEl output del terminal no se guardará en ningún lado si los cerramos (el terminal) de manera que si queremos dejar un proceso funcionando y luego poder consultar qué mensajes nos ha dado el proceso (para chequear si ha ido bien o ha habido algún error durante el procesamiento). Podemos hacer que los mensajes que saldrían en el terminal se guarden en un .txt para luego poder consultarlos utilizando el siguiente comando:\n\nProceso_mandado_a_ejecutar 1&gt;Nombre_que_le_quieras_poner_al_documento.out\n\nEste comando debe de utilizarse de la siguiente manera (en el siguiente ejemplo mi documento se llamará documento_ejemplo.out y lo voy a ejecutar directamente en segundo plano con el comando “&” previamente explicado):\n\nmatt retr_rnaseq accession_numbers.txt -keepsra -o rnaseq_data -p 6 1&gt;documento_ejemplo.out &\n\nCon esto haremos que se guarde un documento .out (que se puede leer como .txt) en la carpeta en la que estemos trabajando y que el proceso se lance directamente en segundo plano por lo que solo necesitaríamos aplicar el comando disown para desvincularlo de la sesión y podremos descuidarnos.\nLos datos se nos descargaran en la carpeta rnaseq_data que hemos escrito en el código ejecutado. Cuando finalice, accedemos a esa carpeta y ejecutamos el comando ls (para ver el listado de archivos que contiene esta carpeta) veremos lo siguiente:\n\nBasal_2_1.fastq.gz      Luminal_1_1.fastq.gz        Luminal_2_1.fastq.gz    SRR1919599.sra      SRR1919603.sra\nBasal_2_2.fastq.gz      Luminal_2_2.fastq.gz    SRR1919600.sra          SRR1919604.sra  dataset_info.tab\nBasal_1_1.fastq.gz              Basal_3_1.fastq.gz          Luminal_3_1.fastq.gz    SRR1919601.sra      Basal_1_2.fastq.gz          \nBasal_3_2.fastq.gz      Luminal_1_2.fastq.gz        Luminal_3_2.fastq.gz    SRR1919602.sra  \n\nUna vez en este punto comenzaremos el alineamiento con Vast-Tools."
  },
  {
    "objectID": "AS_Analysis.html#instalación-de-vast-tools",
    "href": "AS_Analysis.html#instalación-de-vast-tools",
    "title": "Alternative Splicing",
    "section": "2.1 Instalación de Vast-Tools",
    "text": "2.1 Instalación de Vast-Tools\nEn el terminal, tenemos que crear un clon del repositorio de git:\n\ngit clone https://github.com/vastgroup/vast-tools.git\n\nEsto nos va a crear una carpeta en el directorio donde hagamos la clonación que se llamará vast-tools. Debemos acceder a esta carpeta y tenemos que crear una nueva carpeta que se llame “VASTDB” (con el comando mkdir VASTDB) con el cual tenemos que ejecutar los siguientes comandos:\n\nwget https://vastdb.crg.eu/libs/vastdb.hs2.23.06.20.tar.gz\n\nwget https://vastdb.crg.eu/libs/vastdb.mm2.23.06.20.tar.gz\n\nwget https://vastdb.crg.eu/libs/vastdb.rno.23.06.20.tar.gz\n\nCon esto hemos instalado las librerías para hacer el alineamiento en humano (última vesión del genoma), en ratón y en rata, respectivamente. Si necesitamos realizar alineamientos con otras especies hay que acceder el github de Vast-Tolols.\nUna vez hemos instalado esto tenemos que añadir Vast-Tools al PATH para que se pueda ejecutar desde cualquier carpeta. Esto lo hacemos con la siguiente línea de comandos:\n\nexport PATH=~/directorio/donde/hayas/guardado/vast-tools:$PATH\n\necho 'export PATH=~ directorio/donde/hayas/guardado/ vast-tools:$PATH' &gt;&gt; ~/.bashrc\n\nPara comprobar que temenos matt instalado Podemos hacer la prueba de esctibir en el terminal el propio nombre:\n\nVast-tools\n\nY el output que nos debe devolver es el siguiente:\n\nVAST-TOOLS v2.5.1\n\nUsage: vast-tools sub-commands [options]\n\n[sub-commands]\n        align           :       Align RNA-Seq reads to exon-exon junctions and quantify AS\n        merge           :       Merge vast-tool outputs from multiple sub-samples\n        combine         :       Combine two or more 'aligned' RNA-Seq samples into summary tables.\n.\n..\n.\n.\nPerformance:\n  -o/--offrate &lt;int&gt; override offrate of index; must be &gt;= index's offrate\n  -p/--threads &lt;int&gt; number of alignment threads to launch (default: 1)\n  --mm               use memory-mapped I/O for index; many 'bowtie's can share\n  --shmem            use shared mem for index; many 'bowtie's can share\nOther:\n  --seed &lt;int&gt;       seed for random number generator\n  --verbose          verbose output (for debugging)\n  --version          print version information and quit\n  -h/--help          print this usage message\n\nTambién tenemos que instalar una serie de paquetes para R con los siguientes comandos:\n\nR -e 'install.packages(c(\"optparse\", \"RColorBrewer\", \"reshape2\", \"ggplot2\", \"devtools\"))'\n\nR -e 'devtools::install_github(\"kcha/psiplot\")'\n\n\n\n\n\n\n\nContinuamos trabajando en Terminal aunque sea con R\n\n\n\n\n\n\nLa instalación de estos paquetes pueden necesitar de la actualización e instalación de otros, de manera que tendremos que ir comprobando cuales son necesarios y e instalarlos (buscando en internet como instalarlos). Tuve bastantes problemas con esto así que podéis encontrar la solución en el documento del terminal de este día. Una vez instalado vast-tools, es necesario comprobar que tenemos instalado una herramienta de alineamiento: bowtie.\n\n\n\n\n\n\nNote\n\n\n\nTodo lo hecho a partir de aquí está en Terminal_9-15-23.txt"
  },
  {
    "objectID": "AS_Analysis.html#instalación-de-bowtie",
    "href": "AS_Analysis.html#instalación-de-bowtie",
    "title": "Alternative Splicing",
    "section": "2.2 Instalación de bowtie",
    "text": "2.2 Instalación de bowtie\nPara comprobar si la temenos, en debemos hacer la prueba de esctibir en el terminal una de sus funciones, como por ejemplo:\n\nNo index, query, or output file specified!\nUsage:\nbowtie [options]* &lt;ebwt&gt; {-1 &lt;m1&gt; -2 &lt;m2&gt; | --12 &lt;r&gt; | --interleaved &lt;i&gt; | &lt;s&gt;} [&lt;hit&gt;]\n\n  &lt;m1&gt;    Comma-separated list of files containing upstream mates (or the\n.\n.\n Performance:\n  -o/--offrate &lt;int&gt; override offrate of index; must be &gt;= index's offrate\n  -p/--threads &lt;int&gt; number of alignment threads to launch (default: 1)\n  --mm               use memory-mapped I/O for index; many 'bowtie's can share\n  --shmem            use shared mem for index; many 'bowtie's can share\nOther:\n  --seed &lt;int&gt;       seed for random number generator\n  --verbose          verbose output (for debugging)\n  --version          print version information and quit\n  -h/--help          print this usage message\n\nTambién debemos comprobar la versión de que tenemos instalada (debe de ser la versión 1, tener cuidado porque también existe bowtie2 y esa nos va a dar error). Para instalarlo tenemos que escribir los siguientes comandos:\n\nsudo apt-get update -y\nsudo apt-get install -y bowtie\n\nSi está correctamente instalado todo pasamos al alineamiento con Vast-Tools."
  },
  {
    "objectID": "AS_Analysis.html#alineamineto-para-splicing-alternativo-sa",
    "href": "AS_Analysis.html#alineamineto-para-splicing-alternativo-sa",
    "title": "Alternative Splicing",
    "section": "2.3 Alineamineto para Splicing Alternativo (SA)",
    "text": "2.3 Alineamineto para Splicing Alternativo (SA)\nComo hemos repetido, para el alineamiento vamos a utilizar la herramienta Vast-Tools. Para ello vamos a la carpeta en la que tengamos los archivos a analizar (tras procesarlos en matt) y allí ejecutamos el comando vast-tool align (que lo explicaré con sus argumentos a continuación con la imgen 2):\n\nvast-tools align Luminal_1_1.fastq.gz Luminal_1_2.fastq.gz -sp Hs2 -o Vast-Tool_Align --expr --IR_version 2 -c 8 -n Luminal_1 \n\n\n\n\nImagen 2\n\n\n\n\n\n\n\n\nNota 1\n\n\n\nEste ejemplo es para cuando tenemos análisis Pair-end, de manera que tendremos un archivo (“Luminal_1_1.fastq.gz”) para la secuenciación 3’5’ y otro (“Luminal_1_2.fastq.gz”) para la secuenciación 5’3’. Si tuviéramos un análisis Single-end solo tendríamos que poner el único archivo que se nos hubiera descargado para esa muestra.\n\n\n\n\n\n\n\n\nNota 2\n\n\n\nEste ejemplo es para cuando tenemos análisis Pair-end, de manera que tendremos un archivo (“Luminal_1_1.fastq.gz”) para la secuenciación 3’-&gt;5’ y otro (“Luminal_1_2.fastq.gz”) para la secuenciación 5’-&gt;3’. Si tuviéramos un análisis Single-end solo tendríamos que poner el único archivo que se nos hubiera descargado para esa muestra.\n\n\nRealmente el código que yo he corrido es el siguiente para añadir funciones (previamente explicadas):\n\nvast-tools align Luminal_1_1.fastq.gz Luminal_1_2.fastq.gz -sp Hs2top -o Vast-Tool_Align --expr --IR_version 2 -c 8 -n Luminal_1 1&gt;Alineamiento_luminal_1.out &\n\nCon esto le añado al final el comando 1&gt;Alineamiento_luminal_1.out para que me genere un archivo con los mensajes del terminal t así luego poder chequearlos y el comando & para que lo ejecute en segundo plano y así poder seguir usando el terminal (si quisiera desvincularlo a mi sesión ahora podría utilizar disown y podría cerrar el terminal sin miedo a parar el proceso)."
  },
  {
    "objectID": "AS_Analysis.html#generación-de-los-psis-percent-spliced-in",
    "href": "AS_Analysis.html#generación-de-los-psis-percent-spliced-in",
    "title": "Alternative Splicing",
    "section": "2.4 Generación de los PSIs (Percent Spliced-In)",
    "text": "2.4 Generación de los PSIs (Percent Spliced-In)\n\n\n\n\n\n\nNote\n\n\n\nTodo lo hecho a partir de aquí está en Terminal_9-18-23.txt\n\n\nEl siguiente paso es combinar en una tabla todos los eventos de cada muestra. Para ello usaremos el comando vast-tools combine. Para utilizar este comando tenemos que estar en la carpeta que contenga la carpeta donde se han generado los alineamientos (la generada tiene que contener la subcarpeta llamada to_compare):\n\nvast-tools combine -sp Hs2 -o Vast-Tool_Aling –cores 6\n\nEl comando combinará teniendo en cuenta la versión del genoma humano -hg38- (-sp Hs2). Con el argumento -o &lt;directorio&gt; indicamos la carpeta que contiene los archivos a analizar. Tiene que ser la carpeta previamente mencionada, la que contiene la subcarpeta llamada “to_compare” (que coincide con la que pusimos en el argumento -o en el comando del alineamiento (el paso anterior). Con el argumento –cores &lt;nº_cores&gt; indicamos el número de cores o CPUs del superordenador que queremos que se utilicen para este proceso (por defecto se utiliza 1, con 6 va bastante rápido y en 3-5 min está hecho). Para más opciones siempre podemos consultar la ayuda del comando con\n\nvast-tools combine -h"
  },
  {
    "objectID": "AS_Analysis.html#comparaicón-entre-grupos",
    "href": "AS_Analysis.html#comparaicón-entre-grupos",
    "title": "Alternative Splicing",
    "section": "2.5 Comparaicón entre grupos",
    "text": "2.5 Comparaicón entre grupos\nPara la comparación entre grupos y las consecutivas gráficas tendremos que instalar-actualizar bastantes paquetes de R que se nos habrá indicado en el output del proceso anterior. Instalarlos todos antes de continuar. Una vez instalados todos los paquetes que necesitaremos procedemos al proceso de comparación con el comando “vast-tools compare”, el cual lo tenemos que ejecutar en la carpeta en la que hemos generado la combinación (en nuestro caso, y siguiendo con el ejemplo, tendremos que acceder a la carpeta Vast-Tool_Aling):\n\nvast-tools compare INCLUSION_LEVELS_FULL-hg38-6.tab -a Basal_1,Basal_2,Basal_3 -name_A Basal_Cells \n-b Luminal_1,Luminal_2,Luminal_3 -name_B Luminal_Cells -sp Hs2 --print_dPSI \n--GO --print_sets --min_dPSI 25 --min_range 5\n\nLos argumentos utilizados definen lo siguiente:\n\nINCLUSION_LEVELS_FULL-especie_y_version que hayamos utilizado-nº_muestras_procesadas.tab, Este primer argumento se utiliza para indicar dónde se encuentran los datos. Estos datos se encuentran en un archivo que se ha generado con la función to_compare previamente en la carpeta que habíamos indicado, por eso teníamos que acceder a dicha carpeta (en nuestro caso Vast-Tool_Aling)\n-a muestra_1,muestra_2,muestra_3, en este argumento tenemos que añadir todas las muestras que pertenezcan a este grupo, separadas por comas y sin espacios.\n-name_A Nombre_Grupo_A, Nombre que le queremos dar al grupo de muestras incluidas en el grupo “a”.\n-b muestra_1,muestra_2,muestra_3, en este argumento tenemos que añadir todas las muestras que pertenezcan a este grupo, separadas por comas y sin espacios.\n-name_B Nombre_Grupo_B, Nombre que le queremos dar al grupo de muestras incluidas en el grupo “b”.\n-Hs2\n--print_dPSI\n--GO\n--print_sets\n--min_dPSI\n--min_range"
  }
]